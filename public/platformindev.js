// Generated by CoffeeScript 1.6.3
(function() {
  var Block, BoggleParticle, BugLady, ControlObj, GenericSprite, Jelly, Layer, PchooParticle, PowerSuit, Sprite, Target, V, achieve, arrclone, arrsansval, availableactions, bglayer, body, boggletitles, bogimg, bottomof, brickcanvas, brickctx, bricklayer, bugsprites, cachedimg, cacheflippedimg, camera, canvas, canvascircle, checkcolls, chievs, control, ctx, ded, degstorads, down, drawcolls, drawoutline, entcenter, entitycount, falltitles, fglayer, fieldgoaltitles, flipimg, fpscounter, hitboxfilter, hueshift, hueshiftmemo, isholdingkey, ladybug, left, leftof, load, loadimg, logtimecall, looptick, mainloop, makechievbox, marlsprites, murdertitles, normalizekey, placeshrub, preload, preloadcontainer, rainbowhuh, randelem, randfloat, randint, randvec, rectsoverlap, render, right, rightof, save, settings, skipframes, skylayer, sourcebaseurl, sources, spritedrawhitbox, spritelayer, tickno, ticktimes, tickwaitms, tilebackground, tilebackgroundobj, timecall, tmpcanvas, tmpcanvasjq, tmpctx, topof, tt, up,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  settings = {};

  settings.somanygrafics = true;

  settings.drawsprites = true;

  settings.slowmo = false;

  settings.altcostume = true;

  canvas = $("<canvas>");

  body = $("body");

  sourcebaseurl = "./sprites/";

  chievs = {};

  achieve = function(title) {
    if (chievs[title].gotten != null) {
      return;
    }
    chievs[title].gotten = true;
    console.log(chievs);
    return makechievbox(chievs[title].pic, randelem(chievs[title].text));
  };

  bogimg = xmltag('img', {
    src: sourcebaseurl + 'boggle.png'
  });

  murdertitles = ["This isn't brave, it's murder", "Jellycide"];

  fieldgoaltitles = ["3 points field goal", "Into the dunklesphere", "Blasting off again", "pow zoom straight to the moon"];

  falltitles = ["Fractured spine", "Faceplant", "Dats gotta hoit", "OW FUCK", "pomf =3", "Broken legs", "Have a nice trip", "Ow my organs", "Shattered pelvis", "Bugsplat"];

  boggletitles = ["Buggy the boggle champ", "Bushboggler 2013", "Boggle that bush", "Collosal waste of time", "Boggle 2: Electric boggleoo", "Buggy bushboggle", "excuse me wtf are you doing", "Bush it, bush it real good", "Fondly regard flora", "&lt;chievo title unavailable due to trademark infringement&gt;", "Returning a bug to its natural habitat", "Bush it to the limit", "Live Free or Boggle Hard", "Identifying bushes, accurate results with simple tools", "Bugtester", "A proper lady (bug)", "Stupid achievement title", "The daily boggle", bogimg + bogimg + bogimg];

  chievs.fall = {
    pic: "lovelyfall.png",
    text: falltitles
  };

  chievs.kick = {
    pic: "jelly.png",
    text: fieldgoaltitles
  };

  chievs.boggle = {
    pic: "boggle.png",
    text: boggletitles
  };

  chievs.murder = {
    pic: "lovelyshorter.png",
    text: murdertitles
  };

  chievs.target = {
    pic: "target.png",
    text: ["there's no achievement for this"]
  };

  arrclone = function(arr) {
    return arr.slice(0);
  };

  arrsansval = function(arr, val) {
    var i, newarr, _ref;
    newarr = arrclone(arr);
    if (_ref = !val, __indexOf.call(arr, _ref) >= 0) {
      return newarr;
    }
    i = newarr.indexOf(val);
    newarr.splice(i, 1);
    return newarr;
  };

  V = function(x, y) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    return new V2d(x, y);
  };

  randfloat = function() {
    return -1 + Math.random() * 2;
  };

  randvec = function() {
    return V(randfloat(), randfloat());
  };

  randint = function(max) {
    return Math.floor(Math.random() * max);
  };

  randelem = function(arr) {
    return arr[randint(arr.length)];
  };

  Sprite = (function() {
    function Sprite() {
      this.vel = V();
      this.pos = V();
    }

    Sprite.prototype.tick = function() {};

    return Sprite;

  })();

  makechievbox = function(src, text) {
    var chievbox, pic;
    body.append(chievbox = $("<div class=chievbox><span style='display: inline-block; margin-left: 16px'><b>ACHIEVEMENT UNLOCKED</b><br/>" + text + "</span></div>"));
    chievbox.prepend(pic = $(xmltag('img', {
      src: sourcebaseurl + src
    })));
    chievbox.animate({
      top: '32px'
    }).delay(4000);
    return chievbox.animate({
      top: '-100px'
    }, {
      queue: true
    }).delay(2000);
  };

  GenericSprite = (function() {
    function GenericSprite(pos, src) {
      this.pos = pos != null ? pos : V();
      this.src = src;
    }

    GenericSprite.prototype.render = function(ctx) {
      var img;
      img = cachedimg(this.src);
      return ctx.drawImage(img, this.pos.x, this.pos.y);
    };

    return GenericSprite;

  })();

  GenericSprite.prototype.gethitbox = function() {
    var img;
    img = cachedimg(this.src);
    return new Block(this.pos.x, this.pos.y, img.naturalWidth, img.naturalHeight);
  };

  Target = (function(_super) {
    __extends(Target, _super);

    function Target(pos) {
      this.pos = pos;
      this.src = 'target.png';
      this.lifetime = -1;
      this.vel = V();
    }

    Target.prototype.collide = function(otherent) {
      if (otherent instanceof BoggleParticle) {
        this.vel = this.vel.vadd(otherent.vel.nmul(1 / 8));
      }
      if ((otherent.attacktimeout != null) && otherent.attacktimeout > 0 && topof(otherent.gethitbox()) < topof(this.gethitbox())) {
        return this.gethitby(otherent);
      }
    };

    Target.prototype.gethitby = function(otherent) {
      if (this.src !== 'shatteredtarget.png') {
        this.src = 'shatteredtarget.png';
        this.vel = otherent.vel.nmul(1 / 2);
        return this.lifetime = 10;
      }
    };

    return Target;

  })(GenericSprite);

  Target.prototype.render = function(ctx) {
    var img;
    img = cachedimg(this.src);
    return ctx.drawImage(img, this.pos.x, this.pos.y);
  };

  canvascircle = function(context, pos, r) {
    context.beginPath();
    return context.arc(pos.x, pos.y, r, 0, 2 * Math.PI, false);
  };

  degstorads = function(deg) {
    return (deg * Math.PI) / 180;
  };

  Jelly = (function(_super) {
    __extends(Jelly, _super);

    function Jelly(pos) {
      this.pos = pos;
      this.lifetime = -1;
      this.vel = V();
      this.src = 'jelly.png';
      if (Math.random() * 10 < 1) {
        this.royal = true;
      }
    }

    Jelly.prototype.render = function(ctx) {};

    Jelly.prototype.collide = function(otherent) {
      if (otherent instanceof Jelly) {
        this.vel.x = (this.vel.x + otherent.vel.x) / 2;
        this.pos.x += randfloat() * 2;
      }
      if (otherent instanceof BoggleParticle) {
        this.vel = this.vel.vadd(otherent.vel.nmul(1 / 8));
      }
      if (otherent instanceof BugLady && otherent.vel.y > 0) {
        otherent.vel.y *= -0.9;
      }
      if ((otherent.attacktimeout != null) && otherent.attacktimeout > 0 && topof(otherent.gethitbox()) < topof(this.gethitbox())) {
        return this.gethitby(otherent);
      }
    };

    Jelly.prototype.gethitby = function(otherent) {
      var dir;
      this.vel.y += otherent.vel.y;
      dir = otherent.facingleft ? -1 : 1;
      this.vel.x += dir * 4;
      return this.lifetime = 10;
    };

    Jelly.prototype.render = function(ctx) {
      var img;
      img = cachedimg(this.src);
      if (tickno % 10 < 5) {
        img = cacheflippedimg(this.src);
      }
      ctx.drawImage(img, this.pos.x, this.pos.y);
      if (this.royal != null) {
        return ctx.drawImage(cachedimg("crown.png"), this.pos.x + 8, this.pos.y);
      }
    };

    return Jelly;

  })(GenericSprite);

  Jelly.prototype.gethitbox = function() {
    return new Block(this.pos.x, this.pos.y + 16, 32, 16);
  };

  Jelly.prototype.touchingground = function() {
    var block, blockcandidates, collidebox, touch, _i, _len;
    touch = false;
    collidebox = this.gethitbox();
    blockcandidates = bglayer.filter(function(block) {
      return rectsoverlap(collidebox, block);
    });
    for (_i = 0, _len = blockcandidates.length; _i < _len; _i++) {
      block = blockcandidates[_i];
      if (collidebox.y + collidebox.h < block.y + block.h) {
        touch = true;
      }
    }
    return touch;
  };

  entitycount = function(classtype) {
    var ents;
    ents = spritelayer.filter(function(sprite) {
      return sprite instanceof classtype;
    });
    return ents.length;
  };

  Jelly.prototype.tick = function() {
    this.avoidwalls();
    if (this.pos.y < 0) {
      achieve("kick");
    }
    if (this.pos.y < 0 || this.pos.y > 640) {
      this.KILLME = true;
      if (entitycount(Jelly) === 1) {
        achieve("murder");
      }
    }
    if (this.touchingground()) {
      this.vel.y = 0;
      this.pos.y--;
      this.jiggle();
    }
    this.gravitate();
    return this.pos = this.pos.vadd(this.vel);
  };

  Jelly.prototype.jiggle = function() {
    this.vel.x *= 9 / 10;
    if (Math.random() * 100 < 50) {
      this.vel.y = -Math.random() * 4;
      return this.vel.x += randfloat() * 1;
    }
  };

  Jelly.prototype.gravitate = function() {
    if (!this.touchingground()) {
      return this.vel.y++;
    }
  };

  BoggleParticle = (function(_super) {
    __extends(BoggleParticle, _super);

    function BoggleParticle(pos) {
      this.pos = pos != null ? pos : V();
      this.pos = this.pos.nadd(-8);
      this.pos.y += 16;
      this.vel = randvec().norm();
      this.src = 'huh.png';
      this.life = 50;
    }

    BoggleParticle.prototype.tick = function() {
      this.life--;
      if (this.life <= 0) {
        this.KILLME = true;
      }
      this.pos = this.pos.vadd(this.vel);
      return this.vel = this.vel.vadd(randvec().norm().ndiv(8));
    };

    return BoggleParticle;

  })(GenericSprite);

  hueshift = function(src, n) {
    var origimg, pic;
    origimg = loadimg(src);
    pic = Pixastic.process(origimg, "hsl", {
      hue: n,
      saturation: 0,
      lightness: 0
    });
    return pic;
  };

  hueshiftmemo = memoize(hueshift);

  rainbowhuh = function(n) {
    return hueshiftmemo('huh.png', n);
  };

  BoggleParticle.prototype.render = function(ctx) {
    var pic;
    pic = rainbowhuh(this.life * 10);
    return ctx.drawImage(pic, this.pos.x, this.pos.y);
  };

  PchooParticle = (function(_super) {
    __extends(PchooParticle, _super);

    function PchooParticle(pos) {
      this.pos = pos != null ? pos : V();
      this.pos = this.pos.nadd(-8);
      this.pos.y += 16;
      this.vel = randvec().norm().ndiv(8);
      this.life = 20;
    }

    PchooParticle.prototype.tick = function() {
      this.life--;
      if (this.life <= 0) {
        this.KILLME = true;
      }
      this.pos = this.pos.vadd(this.vel);
      return this.vel = this.vel.vadd(randvec().norm().ndiv(64));
    };

    PchooParticle.prototype.render = function(ctx) {
      ctx.rect(this.pos.x, this.pos.y, 4, 4);
      ctx.fillStyle = "cyan";
      return ctx.fill();
    };

    return PchooParticle;

  })(GenericSprite);

  Target.prototype.tick = function() {
    this.vel = this.vel || V(0, 0);
    this.vel = this.vel.nmul(7 / 10);
    this.pos = this.pos.vadd(this.vel);
    if (this.lifetime === 0) {
      this.KILLME = true;
    }
    if (this.lifetime > 0) {
      this.lifetime--;
    }
    if (this.lifetime === 0 && entitycount(Target) === 1) {
      return achieve("target");
    }
  };

  isholdingkey = function(key) {
    key = key.toUpperCase().charCodeAt(0);
    return __indexOf.call(control.heldkeys, key) >= 0;
  };

  BugLady = (function(_super) {
    __extends(BugLady, _super);

    function BugLady() {
      BugLady.__super__.constructor.apply(this, arguments);
      this.jumping = false;
      this.attacking = false;
      this.attacktimeout = 0;
      this.stuntimeout = 0;
    }

    return BugLady;

  })(Sprite);

  BugLady.prototype.respawn = function() {
    this.pos = V();
    return this.vel = V();
  };

  ded = false;

  entcenter = function(ent) {
    var hb;
    hb = ent.gethitbox();
    return V(hb.x + hb.w / 2, hb.y + hb.h / 2);
  };

  BugLady.prototype.blockcollisions = function() {
    var box, candidates, spriteheight;
    spriteheight = 64;
    box = this.fallbox();
    candidates = hitboxfilter(box, bglayer);
    if (candidates.length > 0) {
      if (bottomof(this.gethitbox()) <= topof(candidates[0])) {
        if (this.vel.y > 20) {
          this.stuntimeout = 20;
        }
        this.pos.y = candidates[0].y - spriteheight;
        this.vel.y = 0;
      }
    }
    if (candidates.length > 0 && this.vel.y < 0) {
      return this.vel.y = 0;
    }
  };

  BugLady.prototype.tick = function() {
    var boggling, heading, jumpvel, unpowered, vel, vellimit, walking;
    unpowered = settings.altcostume;
    if (unpowered) {
      this.attacktimeout = 0;
      this.attacking = false;
    }
    this.holdingboggle = isholdingkey('x');
    this.holdingjump = isholdingkey('w');
    if (this.pos.y > 640) {
      if (ded) {
        $('#deathmsg').html("<b>WHAT DID I JUST TELL YOU</b>");
      }
      if (!ded) {
        body.prepend("<p id=deathmsg><b>YOU'RE DEAD</b> now don't let me catch you doing that again young lady</p>");
        ded = true;
      }
      this.respawn();
    }
    vel = Math.abs(this.vel.x);
    walking = vel > 0.2;
    boggling = !walking && this.touchingground() && this.holdingboggle;
    if (boggling && Math.random() < 0.3) {
      this.boggle();
    }
    if (this.poweruptimeout > 0) {
      this.poweruptimeout--;
      this.vel = V2d.zero();
    }
    if (this.stuntimeout > 0) {
      this.stuntimeout--;
      achieve("fall");
      this.vel = V2d.zero();
    }
    vellimit = this.touchingground() ? 4 : 5;
    this.vel.x = mafs.clamp(this.vel.x, -vellimit, vellimit);
    this.blockcollisions();
    this.attacking = this.attacktimeout > 0;
    heading = this.facingleft ? -1 : 1;
    if (this.attacking) {
      this.vel.y *= 0.7;
      this.attacktimeout -= 1;
      this.vel.x += heading * 0.3;
      spritelayer.push(new PchooParticle(entcenter(this)));
    }
    if (this.attacking && this.punching && this.touchingground()) {
      this.vel.x = this.vel.x * 0.1;
    }
    this.pos = this.pos.vadd(this.vel);
    if (!this.touchingground()) {
      this.vel.y += 1;
      if (!this.holdingjump && this.vel.y < 0) {
        this.vel.y /= 2;
      }
    }
    if (this.touchingground()) {
      this.vel.x = this.vel.x * 0.5;
      if (Math.abs(this.vel.x) < 0.0001) {
        this.vel.x = 0;
      }
    }
    jumpvel = 15;
    if (unpowered) {
      jumpvel = 12;
    }
    if (this.touchingground() && this.jumping) {
      this.vel.y = -jumpvel;
    }
    this.jumping = false;
    return this.avoidwalls();
  };

  BugLady.prototype.boggle = function() {
    var boxes, cand, hit;
    spritelayer.push(new BoggleParticle(entcenter(this)));
    hit = ladybug.gethitbox();
    boxes = fglayer.map(function(obj) {
      return obj.gethitbox();
    });
    cand = hitboxfilter(hit, boxes);
    if (cand.length > 0) {
      return achieve("boggle");
    }
  };

  BugLady.prototype.render = function(ctx) {
    var censor, img, offsety, src, vel, walking;
    offsety = 3;
    src = "lovelyshorter.png";
    vel = Math.abs(this.vel.x);
    walking = vel > 0.2;
    if (walking) {
      src = tickno % 12 > 6 ? 'lovelyrun1.png' : 'lovelyrun2.png';
    }
    if (!this.touchingground()) {
      src = this.vel.y < 0 ? 'lovelyjump.png' : 'lovelycrouch.png';
    }
    if (!walking && isholdingkey('s')) {
      src = 'lovelycrouch.png';
    }
    if (!walking && this.touchingground() && this.holdingboggle) {
      src = 'boggle.png';
    }
    if (this.attacking) {
      src = 'viewtiful.png';
    }
    if (this.attacking && this.punching) {
      src = 'bugpunch.png';
    }
    if (this.attacking && this.kicking) {
      src = 'bugkick.png';
    }
    if (this.stuntimeout > 0) {
      src = 'lovelycrouch.png';
    }
    if (this.stuntimeout > 4) {
      src = 'lovelyfall.png';
      offsety = 6;
    }
    if (this.poweruptimeout > 0) {
      src = 'viewtiful.png';
    }
    censor = false;
    if (this.poweruptimeout > 16) {
      src = 'boggle.png';
      this.facingleft = this.poweruptimeout % 10 < 5;
      censor = true;
    }
    if (this.poweruptimeout > 32) {
      src = 'marl/boggle.png';
    }
    if (settings.altcostume) {
      src = "marl/" + src;
    }
    img = this.facingleft ? cacheflippedimg(src) : cachedimg(src);
    ctx.drawImage(img, this.pos.x, this.pos.y + offsety);
    if (censor) {
      return ctx.drawImage(cachedimg("censor.png"), this.pos.x + 16, this.pos.y + 32);
    }
  };

  hitboxfilter = function(hitbox, rectarray) {
    return rectarray.filter(function(box) {
      return rectsoverlap(hitbox, box);
    });
  };

  rectsoverlap = function(recta, rectb) {
    if (recta.x > rectb.x + rectb.w || recta.y > rectb.y + rectb.h || recta.x + recta.w < rectb.x || recta.y + recta.h < rectb.y) {
      return false;
    } else {
      return true;
    }
  };

  BugLady.prototype.gethitbox = function() {
    var h, offsety, trueh, w;
    trueh = 64;
    offsety = -4;
    h = 40;
    w = 20 + Math.abs(this.vel.x);
    return new Block(this.pos.x + (64 / 2 - w / 2), this.pos.y + (trueh - h), w, h);
  };

  BugLady.prototype.fallbox = function() {
    var box;
    box = this.gethitbox();
    box.y += this.vel.y;
    box.x += this.vel.x;
    return box;
  };

  ladybug = new BugLady;

  ladybug.facingleft = false;

  ladybug.jumping = false;

  leftof = function(box) {
    return box.x;
  };

  rightof = function(box) {
    return box.x + box.w;
  };

  bottomof = function(box) {
    return box.y + box.h;
  };

  topof = function(box) {
    return box.y;
  };

  GenericSprite.prototype.avoidwalls = Sprite.prototype.avoidwalls = function() {
    var block, blockcandidates, collidebox, notontop, _i, _len, _results;
    collidebox = this.gethitbox();
    blockcandidates = hitboxfilter(collidebox, bglayer);
    _results = [];
    for (_i = 0, _len = blockcandidates.length; _i < _len; _i++) {
      block = blockcandidates[_i];
      notontop = bottomof(collidebox) > topof(block) + 8;
      if (notontop && leftof(collidebox) < leftof(block)) {
        this.vel.x = 0;
        this.pos.x -= 4;
      }
      if (notontop && rightof(collidebox) > rightof(block)) {
        this.vel.x = 0;
        _results.push(this.pos.x += 4);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  BugLady.prototype.touchingground = function() {
    var block, blockcandidates, collidebox, touch, _i, _len;
    touch = false;
    collidebox = this.gethitbox();
    blockcandidates = bglayer.filter(function(block) {
      return rectsoverlap(collidebox, block);
    });
    for (_i = 0, _len = blockcandidates.length; _i < _len; _i++) {
      block = blockcandidates[_i];
      if (bottomof(collidebox) < bottomof(block)) {
        touch = true;
      }
    }
    return touch;
  };

  ControlObj = (function() {
    function ControlObj() {
      this.bindings = {};
      this.holdbindings = {};
      this.heldkeys = [];
    }

    return ControlObj;

  })();

  control = new ControlObj;

  normalizekey = function(key) {
    return key.toUpperCase().charCodeAt(0);
  };

  ControlObj.prototype.keytapbind = function(key, func) {
    return control.bindings[normalizekey(key)] = func;
  };

  ControlObj.prototype.keyholdbind = function(key, func) {
    return control.holdbindings[normalizekey(key)] = func;
  };

  control.keytapbind('t', function() {
    return settings.slowmo = !settings.slowmo;
  });

  control.keytapbind('g', function() {
    return settings.somanygrafics = !settings.somanygrafics;
  });

  control.keytapbind('b', function() {
    return settings.drawsprites = !settings.drawsprites;
  });

  control.keytapbind('l', function() {
    ladybug.jumping = true;
    ladybug.kicking = false;
    return ladybug.punching = false;
  });

  control.keyholdbind('l', function() {
    return ladybug.attacktimeout = 10;
  });

  control.keytapbind('j', function() {
    ladybug.punching = true;
    ladybug.kicking = false;
    return ladybug.attacktimeout = 10;
  });

  control.keytapbind('k', function() {
    ladybug.kicking = true;
    ladybug.jumping = true;
    ladybug.punching = false;
    return ladybug.attacktimeout = 10;
  });

  up = function() {
    return ladybug.jumping = true;
  };

  down = function() {};

  left = function() {
    var amt;
    ladybug.facingleft = true;
    amt = ladybug.touchingground() ? 3 : 1;
    return ladybug.vel.x -= amt;
  };

  right = function() {
    var amt;
    ladybug.facingleft = false;
    amt = ladybug.touchingground() ? 3 : 1;
    return ladybug.vel.x += amt;
  };

  availableactions = [up, down, left, right];

  control.keyholdbind('w', up);

  control.keyholdbind('s', down);

  control.keyholdbind('a', left);

  control.keyholdbind('d', right);

  save = function() {
    console.log("saving");
    localStorage["bug"] = JSON.stringify(ladybug);
    console.log(localStorage["bug"]);
    return localStorage["settings"] = JSON.stringify(settings);
  };

  load = function() {
    console.log("loading");
    $.extend(ladybug, JSON.parse(localStorage["bug"]));
    ladybug.pos = $.extend(V(), ladybug.pos);
    ladybug.vel = V(ladybug.vel.x, ladybug.vel.y);
    return $.extend(settings, JSON.parse(localStorage["settings"]));
  };

  control.keytapbind('6', save);

  control.keytapbind('7', load);

  this.CONTROL = control;

  $(document).bind('keydown', function(e) {
    var key, _base;
    key = e.which;
    if (typeof (_base = control.bindings)[key] === "function") {
      _base[key]();
    }
    if (!(__indexOf.call(control.heldkeys, key) >= 0)) {
      return control.heldkeys.push(key);
    }
  });

  $(document).bind('keyup', function(e) {
    var key;
    key = e.which;
    return control.heldkeys = arrsansval(control.heldkeys, key);
  });

  tmpcanvasjq = $("<canvas>");

  tmpcanvas = tmpcanvasjq[0];

  ladybug.pos = V(64, 128 + 64);

  ctx = canvas[0].getContext('2d');

  canvas.attr('height', 64 * 6);

  canvas.attr('width', 640);

  canvas.css('border', '1px solid black');

  tickno = 0;

  loadimg = function(src) {
    var img;
    img = new Image;
    img.src = sourcebaseurl + src;
    return img;
  };

  cachedimg = memoize(loadimg);

  flipimg = function(src) {
    var img, newcanvas, newctx;
    img = cachedimg(src);
    newcanvas = $("<canvas>")[0];
    newcanvas.width = img.naturalWidth;
    newcanvas.height = img.naturalHeight;
    newctx = newcanvas.getContext('2d');
    newctx.scale(-1, 1);
    newctx.translate(-img.naturalWidth, 0);
    newctx.drawImage(img, 0, 0);
    return newcanvas;
  };

  cacheflippedimg = memoize(flipimg);

  sources = ['cloud.png', 'jelly.png', 'huh.png', 'suit.png', 'censor.png'];

  sources.push('groundtile.png');

  bugsprites = ['lovelyshorter.png', 'lovelycrouch.png', 'lovelyrun1.png', 'lovelyrun2.png', 'lovelyjump.png', 'lovelyfall.png', 'viewtiful.png', 'boggle.png', 'bugpunch.png', 'bugkick.png'];

  marlsprites = bugsprites.map(function(str) {
    return "marl/" + str;
  });

  sources = sources.concat(marlsprites, bugsprites);

  preloadcontainer = $("<div>");

  preloadcontainer.hide();

  body.append(preloadcontainer);

  preload = function() {
    var img, src, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      src = sources[_i];
      console.log("PRELOADING " + src);
      img = cachedimg(src);
      _results.push(preloadcontainer.append(img));
    }
    return _results;
  };

  preload();

  tilebackgroundobj = function(ctx, offset, imgobj) {
    var ch, cw, horiznum, img, vertnum, _i, _ref, _results;
    offset = offset.op(Math.round);
    cw = canvas[0].width;
    ch = canvas[0].height;
    img = imgobj;
    if (img.width === 0 || img.height === 0) {
      return;
    }
    horiznum = Math.floor(cw / img.width);
    vertnum = Math.floor(ch / img.height);
    return (function() {
      _results = [];
      for (var _i = -1, _ref = horiznum + 1; -1 <= _ref ? _i < _ref : _i > _ref; -1 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).forEach(function(n) {
      var _i, _ref, _results;
      return (function() {
        _results = [];
        for (var _i = -1, _ref = vertnum + 1; -1 <= _ref ? _i <= _ref : _i >= _ref; -1 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).forEach(function(m) {
        var finalx, finaly;
        finalx = n * img.width + (offset.x % img.width);
        finaly = m * img.height + (offset.y % img.height);
        return ctx.drawImage(img, finalx, finaly);
      });
    });
  };

  tilebackground = function(ctx, offset, src) {
    return tilebackgroundobj(ctx, offset, cachedimg(src));
  };

  Block = (function() {
    function Block(x, y, w, h) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
    }

    Block.prototype.render = function(ctx) {
      ctx.beginPath();
      ctx.fillStyle = 'brown';
      return ctx.fillRect(this.x, this.y, this.w, this.h);
    };

    return Block;

  })();

  tmpcanvas.width = canvas[0].width;

  tmpcanvas.height = canvas[0].height;

  tmpctx = tmpcanvas.getContext('2d');

  bglayer = [];

  bglayer.push(new Block(-64, 64 * 5 - 4, 64 * 12, 100));

  bglayer.push(new Block(64 * 4, 64 * 2, 32, 32));

  bglayer.push(new Block(64 * 5, 64 * 4, 32, 32));

  bglayer.push(new Block(64 * 6, 64 * 3, 32, 32));

  bglayer.push(new Block(32, 64 * 4, 64 * 2, 64 * 2));

  bglayer.push(new Block(64 * 12, 64 * 4, 64 * 12, 200));

  fglayer = [];

  spritelayer = [];

  spritelayer = spritelayer.concat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function() {
    return new Target(V(640 * 1.5, 64 * 2).vadd(randvec().vmul(V(640, 100))));
  }));

  spritelayer = spritelayer.concat([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(function() {
    return new Jelly(V(640 * 1.5, 64 * 2).vadd(randvec().vmul(V(640, 100))));
  }));

  PowerSuit = (function(_super) {
    __extends(PowerSuit, _super);

    function PowerSuit(pos) {
      this.pos = pos;
      PowerSuit.__super__.constructor.call(this, this.pos, 'suit.png');
    }

    return PowerSuit;

  })(GenericSprite);

  PowerSuit.prototype.collide = function(otherent) {
    if (otherent instanceof BugLady && this.pos.dist(otherent.pos) < 32) {
      this.KILLME = true;
      otherent.poweruptimeout = 45;
      return settings.altcostume = false;
    }
  };

  spritelayer.push(new PowerSuit(V(128, 32)));

  bglayer.push(new Block(128 + 8, 64 + 20, 64, 32));

  bglayer.push(new Block(128 + 8 + 64, 64 + 20 + 32, 32, 32));

  placeshrub = function(pos) {
    pos = pos.vsub(V(0, 32));
    return fglayer.push(new GenericSprite(pos, 'shrub.png'));
  };

  placeshrub(V(64 * 8, 64 * 5 - 4));

  placeshrub(V(64 * 7 - 48, 64 * 5 - 4));

  placeshrub(V(64 * 9, 64 * 5 - 4));

  Layer = function() {
    var newlayer;
    newlayer = $("<canvas>");
    return newlayer[0];
  };

  brickcanvas = Layer();

  brickcanvas.width = canvas[0].width;

  brickcanvas.height = canvas[0].height;

  brickctx = brickcanvas.getContext('2d');

  drawoutline = function(ctx, block, color) {
    ctx.beginPath();
    ctx.rect(block.x - 1 / 2, block.y - 1 / 2, block.w, block.h);
    ctx.lineWidth = 1;
    ctx.strokeStyle = color;
    return ctx.stroke();
  };

  drawcolls = function(ctx) {
    var collidebox, findhitboxesof, hitboxes, hits;
    collidebox = ladybug.gethitbox();
    drawoutline(ctx, collidebox, 'blue');
    collidebox = ladybug.fallbox();
    drawoutline(ctx, collidebox, 'orange');
    findhitboxesof = [].concat(fglayer, spritelayer);
    hits = findhitboxesof.map(function(sprite) {
      return sprite.gethitbox();
    });
    hitboxes = [].concat(bglayer, hits);
    return hitboxes.forEach(function(block) {
      var color;
      color = rectsoverlap(collidebox, block) ? 'red' : 'green';
      return drawoutline(ctx, block, color);
    });
  };

  skylayer = {};

  skylayer.render = function(ctx) {
    var offset, origtile, tile;
    origtile = cachedimg('cloud.png');
    tile = origtile;
    if (ladybug.holdingboggle) {
      tile = hueshiftmemo('cloud.png', Math.round(tickno / 10) * 10);
    }
    if (settings.somanygrafics) {
      offset = V(tickno * -0.2, Math.sin(tickno / 200) * 64);
      return tilebackgroundobj(ctx, offset, tile);
    }
  };

  bricklayer = {};

  bricklayer.render = function(ctx) {
    if (settings.drawsprites) {
      tilebackground(brickctx, V(-camera.pos.x % 64, -camera.pos.y % 64), "groundtile.png");
    }
    tmpctx.clearRect(0, 0, 640, 640);
    bglayer.forEach(function(sprite) {
      return typeof sprite.render === "function" ? sprite.render(ctx) : void 0;
    });
    tmpctx.save();
    tmpctx.translate(-camera.pos.x, -camera.pos.y);
    bglayer.forEach(function(sprite) {
      return typeof sprite.render === "function" ? sprite.render(tmpctx) : void 0;
    });
    tmpctx.restore();
    tmpctx.globalCompositeOperation = "source-in";
    tmpctx.drawImage(brickcanvas, 0, 0);
    tmpctx.globalCompositeOperation = "source-over";
    ctx.save();
    ctx.translate(camera.pos.x, camera.pos.y);
    ctx.drawImage(tmpcanvas, 0, 0);
    ctx.restore();
    return tmpctx.restore();
  };

  spritedrawhitbox = function(ctx, sprite) {
    var hb, offs, vec, _ref;
    hb = sprite.gethitbox();
    offs = 0.5;
    vec = V(hb.x, hb.y);
    vec = vec.op(Math.round).nadd(offs);
    _ref = vec.toarr(), hb.x = _ref[0], hb.y = _ref[1];
    hb.w = Math.round(hb.w) - offs * 2;
    hb.h = +Math.round(hb.h) - offs * 2;
    return drawoutline(ctx, hb, 'black');
  };

  camera = {};

  camera.pos = V();

  render = function() {
    var offs, renderables, screensize;
    ctx.fillStyle = "skyblue";
    ctx.fillRect(0, 0, 640, 640);
    ctx.save();
    skylayer.render(ctx);
    screensize = V(640, 480);
    camera.pos = ladybug.pos.nadd(64).vsub(screensize.ndiv(2));
    camera.pos.y = mafs.clamp(camera.pos.y, -screensize.y, 0);
    offs = -camera.pos.x;
    ctx.translate(offs, -camera.pos.y);
    bricklayer.render(ctx);
    if (!settings.somanygrafics) {
      drawcolls(ctx);
    }
    renderables = [].concat(spritelayer, [ladybug], fglayer);
    if (settings.drawsprites) {
      renderables.forEach(function(sprite) {
        return typeof sprite.render === "function" ? sprite.render(ctx) : void 0;
      });
    } else {
      renderables.forEach(function(sprite) {
        return spritedrawhitbox(ctx, sprite);
      });
    }
    return ctx.restore();
  };

  timecall = function(func) {
    var starttime;
    starttime = Date.now();
    func();
    return Date.now() - starttime;
  };

  logtimecall = function(func) {
    return console.log("" + (timecall(func)) + " ms.");
  };

  body.append(fpscounter = $(xmltag()));

  tickwaitms = 20;

  skipframes = 0;

  ticktimes = [];

  checkcolls = function(ent, otherents) {
    var bawks;
    bawks = ent.gethitbox();
    return otherents.forEach(function(target) {
      var targethitbox;
      if (target === ent) {
        return;
      }
      targethitbox = target.gethitbox();
      if (rectsoverlap(bawks, targethitbox)) {
        return typeof target.collide === "function" ? target.collide(ent) : void 0;
      }
    });
  };

  looptick = function() {
    var doomedsprites, key, _base, _i, _len, _ref;
    _ref = control.heldkeys;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (typeof (_base = control.holdbindings)[key] === "function") {
        _base[key]();
      }
    }
    checkcolls(ladybug, spritelayer);
    spritelayer.forEach(function(sprite) {
      return checkcolls(sprite, arrsansval(spritelayer, sprite));
    });
    doomedsprites = spritelayer.filter(function(sprite) {
      return sprite.KILLME != null;
    });
    doomedsprites.forEach(function(sprite) {
      return spritelayer = arrsansval(spritelayer, sprite);
    });
    spritelayer.forEach(function(sprite) {
      return typeof sprite.tick === "function" ? sprite.tick() : void 0;
    });
    ladybug.tick();
    if (skipframes === 0 || tickno % (skipframes + 1) === 0) {
      render();
    }
    return tickno++;
  };

  tt = 0;

  mainloop = function() {
    var fps, idealfps, ticktime;
    ticktime = timecall(looptick);
    ticktimes.push(ticktime);
    if (ticktimes.length > 16) {
      tt = Math.round(mafs.avg(ticktimes));
      ticktimes = [];
      skipframes = Math.floor(tt / tickwaitms);
    }
    fps = Math.round(1000 / Math.max(tickwaitms, ticktime));
    idealfps = Math.round(1000 / tickwaitms);
    fpscounter.html("avg tick time: " + tt + "ms, skipping " + skipframes + " frames, running at approx " + fps + " fps (aiming for " + idealfps + " fps)");
    tickwaitms = settings.slowmo ? 1000 / 4 : 1000 / 50;
    return setTimeout(mainloop, Math.max(tickwaitms - ticktime, 1));
  };

  preloadcontainer.imagesLoaded('done', function() {
    body.append("<br/><em>there's no crime to fight around here, use WASD to waste time by purposelessly wiggling around,<br/>X to boggle vacantly and JKL to do some wicked sick totally radical moves</em><br/><p>G and T for some debug dev mode shit</p>");
    return mainloop();
  });

  body.append(canvas);

  canvas.mousedown(function(e) {
    var adjusted, coffs;
    coffs = $(canvas).offset();
    adjusted = V(e.pageX - coffs.left, e.pageY - coffs.top);
    adjusted = adjusted.vadd(camera.pos);
    adjusted = adjusted.op(Math.round);
    return bglayer.push(new Block(adjusted.x, adjusted.y, 32, 32));
  });

}).call(this);
