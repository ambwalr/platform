// Generated by CoffeeScript 1.6.3
(function() {
  var $deathmsg, BLOCKCREATIONTOOL, Block, BoggleParticle, BugLady, BugMeter, Burd, Cloud, ControlObj, Energy, EnergyMeter, Fence, GenericSprite, Gold, Grid, Hat, Hero, INIT, Jelly, Lila, ORIGCLICKPOS, PP, PchooParticle, PlayerBurd, Poly, PowerSuit, ROBOWORLD_INIT, Renderable, Robo, Sky, Sprite, THISFILE, Target, Thug, V, VTOPP, WORLD, WORLDINIT, WORLD_ONE_INIT, achieve, adjustmouseevent, animate, arrowdown, arrowleft, arrowright, arrowup, audiobaseurl, availableactions, bglayer, bindingsDOM, blockdata, blocksatpoint, body, bogglescreen, bogimg, bogsprite, bottomcenter, bottomof, camera, cameraoffset, cancelFullScreen, checkcolls, chievs, clearworld, control, degstorads, down, drawhitboxes, drawsprite, entcenter, entitycount, fglayer, fpscounter, hitboxfilter, hitboxlayer, initsprite, isholdingkey, jame, k, kick, ladybug, lastmodified, launchFullScreen, left, leftof, load, loadblocks, mainloop, makebox, makechievbox, maketablerow, mousemiddledownhandler, mousemiddleuphandler, mousemovehandler, mouserightdownhandler, nextlevel, normalizekey, omnicide, parentstage, pausescreen, pausetext, placeshrub, playsound, punch, randelem, randfloat, randint, randpos, randtri, randvec, relativetobox, removesprite, render, renderer, right, rightof, root, save, scale, scatterents, screensize, selectframe, settings, settingsDOM, skipframes, snapmouseadjust, sourcebaseurl, spawnables, stage, tex, text, tickno, ticktimes, tickwaitms, timecall, titlescreen, tmpcanvas, tmpcanvasjq, toggleFullScreen, topof, tt, up, updatesettingstable, v, xmlwrap, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  THISFILE = "src/platformindev.coffee";

  settings = {};

  settings.drawsprites = true;

  settings.slowmo = false;

  settings.altcostume = true;

  settings.beanmode = false;

  settings.muted = true;

  settings.paused = false;

  settings.volume = 0.2;

  settings.decemberween = false;

  settings.hat = false;

  settings.scale = 2 / 3;

  screensize = new V2d(64 * 16 * settings.scale, 64 * 9 * settings.scale);

  sourcebaseurl = "./sprites/";

  audiobaseurl = "./audio/";

  randfloat = function() {
    return -1 + Math.random() * 2;
  };

  randvec = function() {
    return V(randfloat(), randfloat());
  };

  randint = function(max) {
    return Math.floor(Math.random() * max);
  };

  randelem = function(arr) {
    return arr[randint(arr.length)];
  };

  degstorads = function(degs) {
    return degs * Math.PI / 180;
  };

  body = $("body");

  V = function(x, y) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    return new V2d(x, y);
  };

  PP = function(x, y) {
    return new PIXI.Point(x, y);
  };

  VTOPP = function(v) {
    return PP(v.x, v.y);
  };

  playsound = function(src) {
    var snd;
    if (settings.muted) {
      return;
    }
    snd = new Audio(audiobaseurl + src);
    snd.volume = settings.volume;
    return snd.play();
  };

  parentstage = new PIXI.Stage(0x66FF99);

  stage = new PIXI.DisplayObjectContainer;

  parentstage.addChild(stage);

  hitboxlayer = new PIXI.DisplayObjectContainer;

  stage.addChild(hitboxlayer);

  renderer = PIXI.autoDetectRenderer(screensize.x, screensize.y);

  pausescreen = new PIXI.Graphics();

  pausescreen.beginFill(0x000000);

  pausescreen.drawRect(0, 0, screensize.x, screensize.y);

  pausescreen.alpha = 0.5;

  pausetext = new PIXI.Text("PAUSED", {
    font: "32px Arial",
    fill: "white",
    strokeThickness: 8,
    stroke: 'red'
  });

  pausetext.position = VTOPP(screensize.ndiv(2));

  pausetext.anchor = PP(1 / 2, 1);

  pausescreen.addChild(pausetext);

  pausetext = new PIXI.Text("GO GET SOME SNACKS\nPERHAPS A CARBONATED SODA", {
    font: "16px Arial",
    fill: "white"
  });

  pausetext.position = VTOPP(screensize.ndiv(2).vadd(V(0, 64)));

  pausetext.anchor = PP(1 / 2, 0);

  pausescreen.addChild(pausetext);

  bogglescreen = new PIXI.Graphics();

  bogglescreen.beginFill(0xFF00FF);

  bogglescreen.drawRect(0, 0, screensize.x, screensize.y);

  bogglescreen.alpha = 0.5;

  tex = PIXI.Texture.fromImage(sourcebaseurl + 'smooch.png');

  bogsprite = new PIXI.Sprite(tex);

  bogsprite.anchor = PP(1 / 2, 1 / 2);

  bogsprite.position = VTOPP(screensize.ndiv(2));

  bogsprite.scale = PP(2, 2);

  text = new PIXI.Text("wow a secret\nwarning, the following sprite is EXTREMELY CANON and EXTREMELY SEXY,\nchildrens avert your eyes", {
    font: "16px Arial",
    fill: "white"
  });

  text.position = VTOPP(screensize.ndiv(2).vadd(V(0, -128)));

  text.anchor = PP(1 / 2, 0);

  bogglescreen.addChild(text);

  bogglescreen.addChild(bogsprite);

  tex = PIXI.Texture.fromImage(sourcebaseurl + 'titleplaceholder.png');

  titlescreen = new PIXI.Sprite(tex);

  body.append(renderer.view);

  scale = 1;

  animate = function() {
    var cam;
    cam = cameraoffset().nmul(-scale);
    stage.position = VTOPP(cam);
    stage.scale = PP(scale, scale);
    return renderer.render(parentstage);
  };

  chievs = {};

  achieve = function(title) {
    if (chievs[title].gotten != null) {
      return;
    }
    chievs[title].gotten = true;
    console.log(chievs);
    return makechievbox(chievs[title].pic, randelem(chievs[title].text));
  };

  bogimg = xmltag('img', {
    src: sourcebaseurl + 'boggle.png'
  });

  chievs.fall = {
    pic: "lovelyfall.png"
  };

  chievs.kick = {
    pic: "jelly.png"
  };

  chievs.boggle = {
    pic: "boggle.png"
  };

  chievs.murder = {
    pic: "lovelyshorter.png"
  };

  chievs.target = {
    pic: "target.png"
  };

  chievs.start = {
    pic: "crown.png"
  };

  chievs.start.text = ["wow u started playin the game, congrats", "walking to the right", "chievo modern gaming edition", "baby's first achievement"];

  chievs.murder.text = ["This isn't brave, it's murder", "Jellycide"];

  chievs.kick.text = ["3 points field goal", "Into the dunklesphere", "Blasting off again", "pow zoom straight to the moon"];

  chievs.fall.text = ["Fractured spine", "Faceplant", "Dats gotta hoit", "OW FUCK", "pomf =3", "Broken legs", "Have a nice trip", "Ow my organs", "Shattered pelvis", "Bugsplat"];

  chievs.boggle.text = ["Buggy the boggle champ", "Bushboggler 2013", "Boggle that bush", "Collosal waste of time", "Boggle 2: Electric boggleoo", "Buggy bushboggle", "excuse me wtf are you doing", "Bush it, bush it real good", "Fondly regard flora", "&lt;chievo title unavailable due to trademark infringement&gt;", "Returning a bug to its natural habitat", "Bush it to the limit", "Live Free or Boggle Hard", "Identifying bushes, accurate results with simple tools", "Bugtester", "A proper lady (bug)", "Stupid achievement title", "The daily boggle", bogimg + bogimg + bogimg];

  chievs.target.text = ["there's no achievement for this", "\"Pow, motherfucker, pow\" -socrates", "Expect more. Pay less.", "You're supposed to use arrows you dingus"];

  makechievbox = function(src, text) {
    var chievbox, pic, style;
    style = "style='display: inline-block; margin-left: 16px'";
    body.append(chievbox = $("<div class=chievbox><span " + style + "><b>ACHIEVEMENT UNLOCKED</b><br/>" + text + "</span></div>"));
    chievbox.prepend(pic = $(xmltag('img', {
      src: sourcebaseurl + src
    })));
    chievbox.animate({
      top: '32px'
    }).delay(4000);
    return chievbox.animate({
      top: '-100px'
    }, {
      queue: true
    }).delay(2000);
  };

  Renderable = (function() {
    function Renderable() {}

    return Renderable;

  })();

  Renderable.prototype.hassprite = function() {
    return typeof this._pixisprite !== "undefined";
  };

  Renderable.prototype.removesprite = function() {
    return removesprite(this);
  };

  GenericSprite = (function(_super) {
    __extends(GenericSprite, _super);

    function GenericSprite(pos, src) {
      this.pos = pos != null ? pos : V();
      this.src = src;
      this.vel = V();
    }

    GenericSprite.prototype.render = function() {
      var anchor, flip, pos;
      anchor = this.anchor || V(0, 0);
      flip = false;
      pos = relativetobox(this.gethitbox(), anchor);
      return drawsprite(this, this.src, pos, flip, anchor);
    };

    return GenericSprite;

  })(Renderable);

  GenericSprite.prototype.cleanup = function() {
    return removesprite(this);
  };

  Sprite = (function() {
    function Sprite() {
      this.vel = V();
      this.pos = V();
    }

    Sprite.prototype.tick = function() {};

    return Sprite;

  })();

  Hat = (function(_super) {
    __extends(Hat, _super);

    function Hat() {
      this.src = "hat.png";
      this.pos = V();
      this.anchor = V(1 / 2, 1.5);
      console.log("HAT ACQUIRED");
    }

    return Hat;

  })(GenericSprite);

  Hat.prototype.tick = function() {
    return this.pos = ladybug.pos;
  };

  GenericSprite.prototype.gethitbox = function() {
    var anchor, size;
    size = V(32, 32);
    anchor = this.anchor || V(0, 0);
    return makebox(this.pos, size, anchor);
  };

  Target = (function(_super) {
    __extends(Target, _super);

    function Target(pos) {
      this.pos = pos;
      this.src = 'target.png';
      this.lifetime = -1;
      this.vel = V();
    }

    Target.prototype.collide = function(otherent) {
      if (otherent instanceof BoggleParticle) {
        this.vel = this.vel.vadd(otherent.vel.nmul(1 / 8));
      }
      if ((otherent.attacktimeout != null) && otherent.attacktimeout > 0 && topof(otherent.gethitbox()) < topof(this.gethitbox())) {
        return this.gethitby(otherent);
      }
    };

    Target.prototype.gethitby = function(otherent) {
      if (this.src !== 'shatteredtarget.png') {
        this.src = 'shatteredtarget.png';
        this.vel = otherent.vel.nmul(1 / 2);
        return this.lifetime = 10;
      }
    };

    return Target;

  })(GenericSprite);

  Jelly = (function(_super) {
    __extends(Jelly, _super);

    function Jelly(pos) {
      this.pos = pos;
      this.lifetime = -1;
      this.vel = V();
      this.src = 'jelly.png';
    }

    Jelly.prototype.collide = function(otherent) {
      var timeout;
      if (otherent instanceof Jelly) {
        this.vel.x = (this.vel.x + otherent.vel.x) / 2;
        this.pos.x += randfloat() * 2;
      }
      if (otherent instanceof BoggleParticle) {
        this.vel = this.vel.vadd(otherent.vel.nmul(1 / 8));
      }
      if (otherent instanceof BugLady && otherent.vel.y > 0) {
        otherent.vel.y *= -2;
      }
      timeout = otherent.attacktimeout;
      if ((timeout != null) && timeout > 0 && topof(otherent.gethitbox()) < topof(this.gethitbox())) {
        return this.gethitby(otherent);
      }
    };

    Jelly.prototype.gethitby = function(otherent) {
      var dir;
      this.vel.y += otherent.vel.y;
      dir = otherent.facingleft ? -1 : 1;
      this.vel.x += dir * 4;
      return this.lifetime = 10;
    };

    Jelly.prototype.render = function() {
      var anchor, flip, pos;
      flip = tickno % 10 < 5;
      anchor = V(1 / 2, 1);
      pos = relativetobox(this.gethitbox(), anchor);
      return drawsprite(this, this.src, pos, flip, anchor);
    };

    return Jelly;

  })(GenericSprite);

  Jelly.prototype.gethitbox = function() {
    return makebox(this.pos, V(32, 16), bottomcenter);
  };

  GenericSprite.prototype.touchingground = function() {
    var block, blockcandidates, collidebox, touch, _i, _len;
    touch = false;
    collidebox = this.gethitbox();
    blockcandidates = bglayer.filter(function(block) {
      return collidebox.overlaps(block);
    });
    for (_i = 0, _len = blockcandidates.length; _i < _len; _i++) {
      block = blockcandidates[_i];
      if (collidebox.y + collidebox.h < block.y + block.h) {
        touch = true;
      }
    }
    return touch;
  };

  entitycount = function(classtype) {
    var ents;
    ents = WORLD.spritelayer.filter(function(sprite) {
      return sprite instanceof classtype;
    });
    return ents.length;
  };

  Jelly.prototype.tick = function() {
    this.avoidwalls();
    if (this.pos.y < 0) {
      achieve("kick");
    }
    if (this.pos.y < 0 || this.pos.y > 640) {
      this.KILLME = true;
      if (entitycount(Jelly) === 1) {
        achieve("murder");
      }
    }
    if (this.touchingground()) {
      this.vel.y = 0;
      this.pos.y--;
      this.jiggle();
    }
    this.gravitate();
    return this.pos = this.pos.vadd(this.vel);
  };

  Jelly.prototype.jiggle = function() {
    this.vel.x *= 9 / 10;
    if (Math.random() * 100 < 50) {
      this.vel.y = -Math.random() * 4;
      return this.vel.x += randfloat() * 1;
    }
  };

  GenericSprite.prototype.gravitate = function() {
    if (!this.touchingground()) {
      return this.vel.y++;
    }
  };

  Fence = (function(_super) {
    __extends(Fence, _super);

    function Fence() {
      this.pos = V();
      this.vel = V();
      this.src = "hat.png";
      this.anchor = V(1 / 2, 1);
    }

    return Fence;

  })(GenericSprite);

  Energy = (function(_super) {
    __extends(Energy, _super);

    function Energy(pos) {
      this.pos = pos;
      this.vel = V();
      this.src = "energy1.png";
    }

    return Energy;

  })(Jelly);

  Gold = (function(_super) {
    __extends(Gold, _super);

    function Gold(pos) {
      this.pos = pos;
      this.vel = V();
      this.src = "crown.png";
    }

    return Gold;

  })(Energy);

  Gold.prototype.getsprite = function() {};

  Gold.prototype.collide = function(otherent) {
    if (otherent instanceof BugLady) {
      playsound('boip.wav');
      this.KILLME = true;
      return otherent.score += 1;
    }
  };

  Energy.prototype.getsprite = function() {
    var framelist;
    framelist = [1, 2, 3, 4, 5, 6].map(function(n) {
      return "energy" + n + ".png";
    });
    return this.src = selectframe(framelist, 4);
  };

  Energy.prototype.tick = function() {
    Energy.__super__.tick.call(this);
    return this.getsprite();
  };

  Energy.prototype.jiggle = function() {};

  Energy.prototype.collide = function(otherent) {
    if (otherent instanceof BugLady) {
      playsound('boip.wav');
      this.KILLME = true;
      return otherent.energy += 1;
    }
  };

  relativetobox = function(box, anchor) {
    var pos, size;
    pos = V(box.x, box.y);
    size = V(box.w, box.h);
    pos = pos.vadd(size.vmul(anchor));
    return pos;
  };

  Thug = (function(_super) {
    __extends(Thug, _super);

    function Thug(pos) {
      this.pos = pos;
      this.lifetime = -1;
      this.vel = V();
      this.src = 'bugthug.png';
      this.facingleft = true;
    }

    Thug.prototype.render = function() {
      var anchor, box, flip, pos, sprit;
      flip = !this.facingleft;
      box = this.gethitbox();
      anchor = V(1 / 2, 1);
      pos = relativetobox(box, anchor);
      return sprit = drawsprite(this, this.src, pos, flip, anchor);
    };

    return Thug;

  })(GenericSprite);

  bottomcenter = V(1 / 2, 1);

  Thug.prototype.gethitbox = function() {
    return makebox(this.pos, V(24, 64), bottomcenter);
  };

  Thug.prototype.tick = function() {
    this.pos = this.pos.vadd(this.vel);
    this.avoidwalls();
    this.blockcollisions();
    if (this.touchingground()) {
      this.pos.y--;
      this.vel.y = 0;
      this.friction();
    }
    this.gravitate();
    return this.getsprite();
  };

  Thug.prototype.getsprite = function() {
    if (this.lifetime <= 0) {
      this.src = 'bugthug.png';
    }
    if (this.lifetime > 0) {
      this.lifetime--;
      return this.src = "bugthugoof.png";
    }
  };

  Thug.prototype.collide = function(otherent) {
    if (otherent instanceof BoggleParticle) {
      this.vel = this.vel.vadd(otherent.vel.nmul(1 / 8));
    }
    if ((otherent.attacktimeout != null) && otherent.attacktimeout > 0) {
      return this.gethitby(otherent);
    }
  };

  Thug.prototype.gethitby = function(otherent) {
    var dir;
    this.vel.y += otherent.vel.y;
    dir = otherent.facingleft ? -1 : 1;
    this.vel.x += dir * 1;
    return this.lifetime = 10;
  };

  Lila = (function(_super) {
    __extends(Lila, _super);

    function Lila() {
      _ref = Lila.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Lila;

  })(Thug);

  Robo = (function(_super) {
    __extends(Robo, _super);

    function Robo() {
      _ref1 = Robo.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Robo;

  })(Thug);

  Lila.prototype.tick = Robo.prototype.tick = function() {
    var scamperspeed;
    Robo.__super__.tick.call(this);
    scamperspeed = 3;
    if (!this.scampering && Math.random() < 1 / 10) {
      this.scampering = true;
    }
    if (this.scampering && Math.random() < 1 / 10) {
      this.scampering = false;
    }
    if (this.scampering && Math.abs(this.vel.x) < 3) {
      this.vel.x += this.facingleft ? -scamperspeed : scamperspeed;
    }
    if (!this.scampering && Math.random() < 1 / 20) {
      return this.facingleft = !this.facingleft;
    }
  };

  selectframe = function(framelist, framewait) {
    var framechoice, totalframes;
    totalframes = framelist.length;
    framechoice = Math.floor(tickno / framewait) % totalframes;
    return framelist[framechoice];
  };

  Lila.prototype.getsprite = function() {
    var framelist, framewait, idlecycle, scampercycle;
    idlecycle = ['lilaidle1.png', 'lilaidle2.png'];
    scampercycle = [1, 2, 3, 4].map(function(n) {
      return "lilascamper" + n + ".png";
    });
    framewait = 4;
    framelist = idlecycle;
    if (!this.scampering) {
      framewait = 20;
    }
    if (this.scampering) {
      framelist = scampercycle;
    }
    return this.src = selectframe(framelist, framewait);
  };

  Robo.prototype.getsprite = function() {
    var framelist, framewait, idlecycle, scampercycle;
    idlecycle = ['roboroll1.png'];
    scampercycle = [1, 2].map(function(n) {
      return "roboroll" + n + ".png";
    });
    framelist = idlecycle;
    if (this.scampering) {
      framelist = scampercycle;
    }
    if (this.lifetime > 0) {
      this.lifetime--;
      framelist = ["robohurt.png"];
    }
    framewait = 4;
    return this.src = selectframe(framelist, framewait);
  };

  Lila.prototype.collide = function(otherent) {
    var offs;
    if (otherent instanceof BoggleParticle) {
      parentstage.addChild(bogglescreen);
    }
    if (otherent instanceof Fence) {
      console.log("LEDGE");
      this.vel.x = 0;
      offs = otherent.pos.x < this.pos.x ? 1 : -1;
      return this.pos.x += offs;
    }
  };

  Burd = (function(_super) {
    __extends(Burd, _super);

    function Burd(pos) {
      this.pos = pos != null ? pos : V();
      this.vel = V(0, 0);
      this.anchor = V(1 / 2, 1 / 2);
      this.src = 'burd.png';
    }

    return Burd;

  })(GenericSprite);

  Burd.prototype.tick = function() {
    var dir, lpos;
    this.getsprite();
    this.pos = this.pos.vadd(this.vel);
    lpos = ladybug.pos || V();
    dir = lpos.vsub(this.pos).norm();
    this.vel = this.vel.vadd(dir);
    if (this.vel.mag() > 10) {
      return this.vel = this.vel.norm().nmul(10);
    }
  };

  Burd.prototype.render = function() {
    var anchor, flip, pos;
    anchor = this.anchor || V(0, 0);
    flip = false;
    pos = relativetobox(this.gethitbox(), anchor);
    drawsprite(this, this.src, pos, flip, anchor);
    this._pixisprite.scale.x = 1 / 3;
    return this._pixisprite.scale.y = 1 / 3;
  };

  Burd.prototype.getsprite = function() {
    var framelist;
    framelist = ['burd.png', 'burdflap.png'];
    return this.src = randelem(framelist);
  };

  GenericSprite.prototype.blockcollisions = function() {
    var box, candidates, spriteheight,
      _this = this;
    box = this.gethitbox();
    spriteheight = box.h;
    candidates = hitboxfilter(box, bglayer);
    candidates.forEach(function(candidate) {
      if (bottomof(_this.gethitbox()) >= topof(candidate)) {
        _this.pos.y = candidate.y;
        return _this.vel.y = 0;
      }
    });
    if (candidates.length > 0 && this.vel.y < 0) {
      return this.vel.y = 0;
    }
  };

  BoggleParticle = (function(_super) {
    __extends(BoggleParticle, _super);

    function BoggleParticle(pos) {
      this.pos = pos != null ? pos : V();
      this.pos = this.pos.nadd(-8);
      this.pos.y += 16;
      this.vel = randvec().norm();
      this.src = 'huh.png';
      this.life = 50;
    }

    BoggleParticle.prototype.tick = function() {
      this.life--;
      if (this.life <= 0) {
        this.KILLME = true;
      }
      this.pos = this.pos.vadd(this.vel);
      return this.vel = this.vel.vadd(randvec().norm().ndiv(8));
    };

    return BoggleParticle;

  })(GenericSprite);

  BoggleParticle.prototype.render = function() {
    return drawsprite(this, 'huh.png', this.pos, false);
  };

  PchooParticle = (function(_super) {
    __extends(PchooParticle, _super);

    function PchooParticle(pos) {
      this.pos = pos != null ? pos : V();
      this.vel = randvec().norm().ndiv(8);
      this.life = 20;
      this.src = 'bughealth.png';
      this.anchor = V(1 / 2, 1 / 2);
    }

    PchooParticle.prototype.tick = function() {
      this.life--;
      if (this.life <= 0) {
        this.KILLME = true;
      }
      this.pos = this.pos.vadd(this.vel);
      return this.vel = this.vel.vadd(randvec().norm().ndiv(64));
    };

    PchooParticle.prototype.render = function() {
      drawsprite(this, this.src, this.pos, false, this.anchor);
      return this._pixisprite.alpha = 0.25;
    };

    return PchooParticle;

  })(GenericSprite);

  Target.prototype.tick = function() {
    this.vel = this.vel.nmul(7 / 10);
    this.pos = this.pos.vadd(this.vel);
    if (this.lifetime === 0) {
      this.KILLME = true;
    }
    if (this.lifetime > 0) {
      this.lifetime--;
    }
    if (this.lifetime === 0 && entitycount(Target) === 1) {
      return achieve("target");
    }
  };

  isholdingkey = function(key) {
    key = key.toUpperCase().charCodeAt(0);
    return __indexOf.call(control.heldkeys, key) >= 0;
  };

  Hero = (function(_super) {
    __extends(Hero, _super);

    function Hero() {
      _ref2 = Hero.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return Hero;

  })(GenericSprite);

  BugLady = (function(_super) {
    __extends(BugLady, _super);

    function BugLady() {
      BugLady.__super__.constructor.call(this);
      this.jumping = false;
      this.attacking = false;
      this.attacktimeout = 0;
      this.stuntimeout = 0;
      this.health = 3;
      this.energy = 0;
      this.score = 0;
    }

    return BugLady;

  })(Hero);

  BugLady.prototype.respawn = function() {
    this.pos = V();
    this.vel = V();
    return this.health = 3;
  };

  BugLady.prototype.takedamage = function() {
    this.health -= 1;
    if (this.health <= 0) {
      return this.kill();
    }
  };

  entcenter = function(ent) {
    var hb;
    hb = ent.gethitbox();
    return V(hb.x + hb.w / 2, hb.y + hb.h / 2);
  };

  BugLady.prototype.blockcollisions = function() {
    var box, candidates, spriteheight,
      _this = this;
    spriteheight = 64;
    box = this.fallbox();
    candidates = hitboxfilter(box, bglayer);
    candidates.forEach(function(candidate) {
      if (bottomof(_this.gethitbox()) <= topof(candidate)) {
        if (_this.vel.y > 20) {
          _this.stuntimeout = 20;
          _this.takedamage();
        }
        _this.pos.y = candidate.y;
        return _this.vel.y = 0;
      }
    });
    if (candidates.length > 0 && this.vel.y < 0) {
      return this.vel.y = 0;
    }
  };

  Hero.prototype.checkcontrols = function() {};

  BugLady.prototype.checkcontrols = function() {
    this.holdingboggle = isholdingkey('x');
    return this.holdingjump = isholdingkey('w');
  };

  BugLady.prototype.cancelattack = function() {
    this.attacktimeout = 0;
    return this.attacking = false;
  };

  Hero.prototype.outofbounds = function() {
    return this.pos.y > 640;
  };

  $deathmsg = $("<p id=deathmsg></p>").html("<b>YOU'RE DEAD</b> now don't let me catch you doing that again young lady");

  BugLady.prototype.kill = function() {
    if (this.ded) {
      $('#deathmsg').html("<b>WHAT DID I JUST TELL YOU</b>");
    }
    if (!this.ded) {
      body.prepend($deathmsg);
      this.ded = true;
    }
    return this.respawn();
  };

  BugLady.prototype.timeoutcheck = function() {
    if (this.poweruptimeout > 0) {
      this.poweruptimeout--;
      this.vel = V2d.zero();
    }
    if (this.stuntimeout > 0) {
      this.stuntimeout--;
      achieve("fall");
      return this.vel = V2d.zero();
    }
  };

  BugLady.prototype.attackchecks = function() {
    var heading;
    this.attacking = this.attacktimeout > 0;
    heading = this.facingleft ? -1 : 1;
    if (this.attacking) {
      this.vel.y *= 0.7;
      this.attacktimeout -= 1;
      this.vel.x += heading * 0.3;
      WORLD.spritelayer.push(new PchooParticle(entcenter(this)));
    }
    if (this.attacking && this.punching && this.touchingground()) {
      return this.vel.x = this.vel.x * 0.1;
    }
  };

  BugLady.prototype.tick = function() {
    var boggling, jumpvel, unpowered, vel, vellimit, walking;
    unpowered = settings.altcostume;
    if (unpowered) {
      this.cancelattack();
    }
    this.checkcontrols();
    if (this.outofbounds()) {
      this.kill();
    }
    vel = Math.abs(this.vel.x);
    walking = vel > 0.2;
    boggling = !walking && this.touchingground() && this.holdingboggle;
    if (boggling && Math.random() < 0.3) {
      this.boggle();
    }
    this.timeoutcheck();
    vellimit = this.touchingground() ? 4 : 5;
    this.vel.x = mafs.clamp(this.vel.x, -vellimit, vellimit);
    this.blockcollisions();
    this.avoidwalls();
    this.attackchecks();
    this.pos = this.pos.vadd(this.vel);
    if (!this.touchingground()) {
      this.gravitate();
      if (!this.holdingjump && this.vel.y < 0) {
        this.vel.y /= 2;
      }
    }
    if (this.touchingground()) {
      this.friction();
    }
    jumpvel = unpowered ? 12 : 16;
    this.jumpimpulse(jumpvel);
    this.jumping = false;
    return this.climbing = this.touchingwall();
  };

  BugLady.prototype.jumpimpulse = function(jumpvel) {
    if (this.touchingground() && this.jumping) {
      return this.vel.y = -jumpvel;
    }
  };

  BugLady.prototype.gravitate = function() {
    return this.vel.y += 1;
  };

  GenericSprite.prototype.friction = function() {
    return this.vel.x = this.vel.x * 0.5;
  };

  BugLady.prototype.boggle = function() {
    var boxes, cand, hit;
    WORLD.spritelayer.push(new BoggleParticle(entcenter(this)));
    hit = ladybug.gethitbox();
    boxes = fglayer.map(function(obj) {
      return obj.gethitbox();
    });
    cand = hitboxfilter(hit, boxes);
    if (cand.length > 0) {
      return achieve("boggle");
    }
  };

  BugLady.prototype.getsprite = function() {
    var src, vel, walking;
    if (settings.beanmode) {
      return "bugbean.png";
    }
    src = "lovelyshorter.png";
    vel = Math.abs(this.vel.x);
    walking = vel > 0.2;
    if (walking) {
      src = selectframe(['lovelyrun1.png', 'lovelyrun2.png'], 6);
    }
    if (!this.touchingground()) {
      src = this.vel.y < 0 ? 'lovelyjump.png' : 'lovelycrouch.png';
    }
    if (!walking && isholdingkey('s')) {
      src = 'lovelycrouch.png';
    }
    if (!walking && this.touchingground() && this.holdingboggle) {
      src = 'boggle.png';
    }
    if (this.attacking) {
      src = 'viewtiful.png';
    }
    if (this.attacking && this.punching) {
      src = 'bugpunch.png';
    }
    if (this.attacking && this.attacktimeout < 2 && this.punching) {
      src = 'lovelyrun2.png';
    }
    if (this.attacking && this.kicking) {
      src = 'bugkick.png';
    }
    if (this.stuntimeout > 0) {
      src = 'lovelycrouch.png';
    }
    if (this.stuntimeout > 4) {
      src = 'lovelyfall.png';
    }
    if (this.poweruptimeout > 0) {
      src = 'viewtiful.png';
    }
    if (this.poweruptimeout > 16) {
      src = 'boggle.png';
      this.facingleft = this.poweruptimeout % 10 < 5;
    }
    if (this.poweruptimeout > 32) {
      src = 'marl/boggle.png';
    }
    if (settings.altcostume) {
      src = "marl/" + src;
    }
    if (this.climbing) {
      src = 'bugclimb1.png';
    }
    if (this.climbing && settings.altcostume) {
      src = 'marl/boggle.png';
    }
    return src;
  };

  BugLady.prototype.render = function() {
    var anchor, flip, offs, pos, sprit, src, vel, walking;
    vel = Math.abs(this.vel.x);
    walking = vel > 1;
    src = this.getsprite();
    flip = this.facingleft;
    if (settings.beanmode && walking) {
      flip = tickno % 8 < 4;
    }
    offs = V(0, 4);
    anchor = V(1 / 2, 1);
    pos = relativetobox(this.gethitbox(), anchor);
    pos = offs.vadd(pos);
    sprit = drawsprite(this, src, pos, flip, anchor);
    if (src === 'boggle.png') {
      return sprit.rotation = degstorads(randfloat() * 4);
    } else {
      return sprit.rotation = 0;
    }
  };

  PlayerBurd = (function(_super) {
    __extends(PlayerBurd, _super);

    function PlayerBurd() {
      PlayerBurd.__super__.constructor.call(this);
      this.jumping = false;
      this.attacking = false;
      this.attacktimeout = 0;
      this.stuntimeout = 0;
      this.health = 3;
      this.energy = 0;
      this.score = 0;
      this.src = 'burd.png';
      this.facingleft = false;
      this.anchor = V(1 / 2, 1);
    }

    return PlayerBurd;

  })(Hero);

  PlayerBurd.prototype.takedamage = BugLady.prototype.takedamage;

  PlayerBurd.prototype.getsprite = function() {
    return 'burd.png';
  };

  PlayerBurd.prototype.render = function() {
    var anchor, flip, pos, sprit, src;
    console.log(this.src);
    src = this.src;
    anchor = this.anchor || V(0, 0);
    flip = false;
    pos = this.pos;
    sprit = drawsprite(this, src, pos, flip, anchor);
  };

  PlayerBurd.prototype.tick = function() {
    var heading, vel;
    this.checkcontrols();
    if (this.outofbounds()) {
      this.kill();
    }
    vel = Math.abs(this.vel.x);
    this.blockcollisions();
    this.avoidwalls();
    heading = this.facingleft ? -1 : 1;
    this.pos = this.pos.vadd(this.vel);
    if (!this.touchingground()) {
      return this.gravitate();
    }
  };

  removesprite = function(ent) {
    if (!ent._pixisprite) {
      return;
    }
    stage.removeChild(ent._pixisprite);
    return ent._pixisprite = void 0;
  };

  initsprite = function(ent, tex) {
    var sprit;
    sprit = new PIXI.Sprite(tex);
    ent._pixisprite = sprit;
    stage.addChild(sprit);
    return sprit;
  };

  drawsprite = function(ent, src, pos, flip, anchor) {
    var sprit;
    if (anchor == null) {
      anchor = V();
    }
    tex = PIXI.Texture.fromImage(sourcebaseurl + src);
    if (!ent._pixisprite) {
      initsprite(ent, tex);
    }
    sprit = ent._pixisprite;
    sprit.position = VTOPP(pos);
    sprit.anchor = VTOPP(anchor);
    sprit.setTexture(tex);
    sprit.scale.x = flip ? -1 : 1;
    return sprit;
  };

  Poly = (function(_super) {
    __extends(Poly, _super);

    function Poly(points) {
      this.points = points != null ? points : [];
    }

    return Poly;

  })(Renderable);

  Poly.prototype.initsprite = function() {
    var firstpoint, sprit;
    sprit = new PIXI.Graphics();
    sprit.beginFill(0xcc0000);
    sprit.lineStyle(1, 0x000000);
    firstpoint = this.points[0];
    this.points.forEach(function(point) {
      return sprit.lineTo(point.x, point.y);
    });
    sprit.lineTo(firstpoint.x, firstpoint.y);
    sprit.endFill();
    this._pixisprite = sprit;
    return stage.addChild(sprit);
  };

  Poly.prototype.render = function() {
    if (!this.hassprite()) {
      return this.initsprite();
    }
  };

  Poly.prototype.gethitbox = function() {
    return makebox(V(0, 0), V(0, 0), V(0, 0));
  };

  Block = (function(_super) {
    __extends(Block, _super);

    function Block(x, y, w, h) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
      this.pos = V(this.x, this.y);
    }

    return Block;

  })(Renderable);

  Block.prototype.tostone = function() {
    this.src = "groundstone.png";
    return this.removesprite();
  };

  Block.prototype.overlaps = function(rectb) {
    var recta;
    recta = this;
    if (recta.x > rectb.x + rectb.w || recta.y > rectb.y + rectb.h || recta.x + recta.w < rectb.x || recta.y + recta.h < rectb.y) {
      return false;
    } else {
      return true;
    }
  };

  Block.prototype.fixnegative = function() {
    if (this.w < 0) {
      this.x += this.w;
      this.w *= -1;
    }
    if (this.h < 0) {
      this.y += this.h;
      this.h *= -1;
    }
    this.pos = V(this.x, this.y);
    return this.removesprite();
  };

  hitboxfilter = function(hitbox, rectarray) {
    return rectarray.filter(function(box) {
      return hitbox.overlaps(box);
    });
  };

  makebox = function(position, dimensions, anchor) {
    var truepos;
    truepos = position.vsub(dimensions.vmul(anchor));
    return new Block(truepos.x, truepos.y, dimensions.x, dimensions.y);
  };

  bottomcenter = V(1 / 2, 1);

  BugLady.prototype.gethitbox = function() {
    var h, w;
    w = 16;
    h = 32;
    return makebox(this.pos, V(w, h), bottomcenter);
  };

  BugLady.prototype.fallbox = function() {
    var box;
    box = this.gethitbox();
    box.y += this.vel.y;
    box.x += this.vel.x;
    return box;
  };

  leftof = function(box) {
    return box.x;
  };

  rightof = function(box) {
    return box.x + box.w;
  };

  bottomof = function(box) {
    return box.y + box.h;
  };

  topof = function(box) {
    return box.y;
  };

  Block.prototype.left = function() {
    return leftof(this);
  };

  Block.prototype.right = function() {
    return rightof(this);
  };

  Block.prototype.bottom = function() {
    return bottomof(this);
  };

  Block.prototype.top = function() {
    return topof(this);
  };

  blocksatpoint = function(blocks, p) {
    return blocks.filter(function(box) {
      return box.x <= p.x && box.y <= p.y && box.x + box.w >= p.x && box.y + box.h >= p.y;
    });
  };

  GenericSprite.prototype.touchingwall = Sprite.prototype.touchingwall = function() {
    var block, blockcandidates, collidebox, notontop, _i, _len;
    collidebox = this.gethitbox();
    blockcandidates = hitboxfilter(collidebox, bglayer);
    for (_i = 0, _len = blockcandidates.length; _i < _len; _i++) {
      block = blockcandidates[_i];
      notontop = bottomof(collidebox) > topof(block);
      if (notontop && collidebox.left() < block.left()) {
        return true;
      }
      if (notontop && collidebox.right() > block.right()) {
        return true;
      }
    }
    return false;
  };

  GenericSprite.prototype.avoidwalls = Sprite.prototype.avoidwalls = function() {
    var block, blockcandidates, collidebox, notontop, ofs, _i, _len, _results;
    collidebox = this.gethitbox();
    blockcandidates = hitboxfilter(collidebox, bglayer);
    _results = [];
    for (_i = 0, _len = blockcandidates.length; _i < _len; _i++) {
      block = blockcandidates[_i];
      notontop = bottomof(collidebox) > topof(block);
      ofs = 1;
      if (notontop && leftof(collidebox) < leftof(block)) {
        this.vel.x = 0;
        this.pos.x -= ofs;
      }
      if (notontop && rightof(collidebox) > rightof(block)) {
        this.vel.x = 0;
        _results.push(this.pos.x += ofs);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  BugLady.prototype.touchingground = function() {
    var block, blockcandidates, collidebox, touch, _i, _len;
    touch = false;
    collidebox = this.gethitbox();
    blockcandidates = hitboxfilter(collidebox, bglayer);
    for (_i = 0, _len = blockcandidates.length; _i < _len; _i++) {
      block = blockcandidates[_i];
      if (bottomof(collidebox) < bottomof(block)) {
        touch = true;
      }
    }
    return touch;
  };

  PowerSuit = (function(_super) {
    __extends(PowerSuit, _super);

    function PowerSuit(pos) {
      this.pos = pos;
      PowerSuit.__super__.constructor.call(this, this.pos, 'suit.png');
    }

    return PowerSuit;

  })(GenericSprite);

  PowerSuit.prototype.collide = function(otherent) {
    if (otherent instanceof BugLady) {
      this.KILLME = true;
      otherent.poweruptimeout = 45;
      return settings.altcostume = false;
    }
  };

  ControlObj = (function() {
    function ControlObj() {
      this.bindings = {};
      this.holdbindings = {};
      this.heldkeys = [];
      this.bindingnames = {};
    }

    return ControlObj;

  })();

  control = new ControlObj;

  this.control = control;

  normalizekey = function(key) {
    return key.toUpperCase().charCodeAt(0);
  };

  ControlObj.prototype.keytapbindraw = function(key, func) {
    return this.bindings[key] = func;
  };

  ControlObj.prototype.keytapbind = function(key, func) {
    return this.bindings[normalizekey(key)] = func;
  };

  ControlObj.prototype.keytapbindname = function(key, name, func) {
    this.bindingnames[normalizekey(key)] = name;
    console.log(this.bindingnames);
    return this.keytapbind(key, func);
  };

  ControlObj.prototype.keyBindRawNamed = function(key, name, func) {
    this.bindingnames[key] = name;
    console.log(this.bindingnames);
    return this.keytapbindraw(key, func);
  };

  ControlObj.prototype.keyholdbind = function(key, func) {
    return this.holdbindings[normalizekey(key)] = func;
  };

  control.keytapbindname('9', 'zoom out', function() {
    return scale -= 0.1;
  });

  control.keytapbindname('0', 'zoom in', function() {
    return scale += 0.1;
  });

  control.keytapbindname('v', 'spawn burd', function() {
    return jame.spawn('burd');
  });

  control.keytapbindname('z', 'become burd', function() {
    return jame.burdme();
  });

  launchFullScreen = function(elm) {
    if (typeof elm.requestFullScreen === "function") {
      elm.requestFullScreen();
    }
    if (typeof elm.mozRequestFullScreen === "function") {
      elm.mozRequestFullScreen();
    }
    return typeof elm.webkitRequestFullScreen === "function" ? elm.webkitRequestFullScreen() : void 0;
  };

  cancelFullScreen = function() {
    if (typeof document.cancelFullScreen === "function") {
      document.cancelFullScreen();
    }
    if (typeof document.mozCancelFullScreen === "function") {
      document.mozCancelFullScreen();
    }
    return typeof document.webkitCancelFullScreen === "function" ? document.webkitCancelFullScreen() : void 0;
  };

  toggleFullScreen = function(elm) {
    var isfullscreen;
    isfullscreen = document.fullScreen || document.mozFullScreen || document.webkitFullScreen;
    if (isfullscreen) {
      return cancelFullScreen();
    } else {
      return launchFullScreen(elm);
    }
  };

  control.keytapbindname('y', 'toggle fullscreen', function() {
    return toggleFullScreen(renderer.view);
  });

  control.keytapbindname('p', 'pause', function() {
    playsound("pause.wav");
    settings.paused = !settings.paused;
    if (settings.paused) {
      parentstage.addChild(pausescreen);
    }
    if (!settings.paused) {
      return parentstage.removeChild(pausescreen);
    }
  });

  control.keytapbindname('t', 'underclock/slowmo', function() {
    return settings.slowmo = !settings.slowmo;
  });

  control.keytapbindname('g', 'toggle grid', function() {
    return settings.grid = !settings.grid;
  });

  control.keytapbindname('b', 'toggle beanmode', function() {
    return settings.beanmode = !settings.beanmode;
  });

  control.keytapbindname('l', 'WHAM!', function() {
    ladybug.jumping = true;
    ladybug.kicking = false;
    return ladybug.punching = false;
  });

  control.keyholdbind('l', function() {
    return ladybug.attacktimeout = 10;
  });

  punch = function() {
    ladybug.punching = true;
    ladybug.kicking = false;
    ladybug.attacktimeout = 10;
    return playsound("hit.wav");
  };

  kick = function() {
    ladybug.kicking = true;
    ladybug.jumping = true;
    ladybug.punching = false;
    ladybug.attacktimeout = 10;
    return playsound("hit.wav");
  };

  control.keytapbindname('j', 'POW!', punch);

  control.keytapbindname('k', 'BAM!', kick);

  control.keytapbindname('m', 'mute', function() {
    return settings.muted = !settings.muted;
  });

  up = function() {
    if (ladybug.touchingground()) {
      playsound("jump.wav");
    }
    return ladybug.jumping = true;
  };

  down = function() {};

  left = function() {
    var amt;
    ladybug.facingleft = true;
    amt = ladybug.touchingground() ? 3 : 1;
    return ladybug.vel.x -= amt;
  };

  right = function() {
    var amt;
    achieve("start");
    ladybug.facingleft = false;
    amt = ladybug.touchingground() ? 3 : 1;
    return ladybug.vel.x += amt;
  };

  availableactions = [up, down, left, right];

  control.keyholdbind('w', up);

  control.keyholdbind('s', down);

  control.keyholdbind('a', left);

  control.keyholdbind('d', right);

  arrowleft = 37;

  arrowup = 38;

  arrowright = 39;

  arrowdown = 40;

  control.keyBindRawNamed(arrowup, 'jump', up);

  save = function() {
    var tmpladybug;
    console.log(ladybug);
    tmpladybug = $.extend({}, ladybug);
    tmpladybug._pixisprite = void 0;
    console.log("saving");
    localStorage["bug"] = JSON.stringify(tmpladybug);
    console.log(localStorage["bug"]);
    return localStorage["settings"] = JSON.stringify(settings);
  };

  load = function() {
    console.log("loading");
    $.extend(ladybug, JSON.parse(localStorage["bug"]));
    ladybug.pos = $.extend(V(), ladybug.pos);
    ladybug.vel = V(ladybug.vel.x, ladybug.vel.y);
    return $.extend(settings, JSON.parse(localStorage["settings"]));
  };

  control.keytapbindname('6', 'save', save);

  control.keytapbindname('7', 'load', load);

  nextlevel = function() {
    clearworld();
    ROBOWORLD_INIT();
    return WORLDINIT();
  };

  control.keytapbindname('n', 'change level', nextlevel);

  this.CONTROL = control;

  $(document).bind('keydown', function(e) {
    var key, _base;
    key = e.which;
    if (typeof (_base = control.bindings)[key] === "function") {
      _base[key]();
    }
    if (!(__indexOf.call(control.heldkeys, key) >= 0)) {
      return control.heldkeys.push(key);
    }
  });

  $(document).bind('keyup', function(e) {
    var key;
    key = e.which;
    return control.heldkeys = _.without(control.heldkeys, key);
  });

  tmpcanvasjq = $("<canvas>");

  tmpcanvas = tmpcanvasjq[0];

  tickno = 0;

  Block.prototype.gethitbox = function() {
    return this;
  };

  Block.prototype.initsprite = function() {
    var sprit, src;
    src = this.src || "groundtile.png";
    tex = PIXI.Texture.fromImage(sourcebaseurl + src);
    sprit = new PIXI.TilingSprite(tex, this.w, this.h);
    this._pixisprite = sprit;
    return stage.addChild(sprit);
  };

  Block.prototype.render = function() {
    var sprit;
    if (!this.hassprite()) {
      this.initsprite();
    }
    sprit = this._pixisprite;
    sprit.tilePosition.x = -this.x;
    sprit.tilePosition.y = -this.y;
    sprit.position.x = this.x;
    return sprit.position.y = this.y;
  };

  ladybug = new BugLady;

  ladybug.facingleft = false;

  ladybug.jumping = false;

  ladybug.pos = V(64, 128 + 64);

  bglayer = [];

  fglayer = [];

  Sky = (function() {
    function Sky() {}

    return Sky;

  })();

  Sky.prototype.render = function() {};

  Cloud = (function(_super) {
    __extends(Cloud, _super);

    function Cloud() {
      Cloud.__super__.constructor.call(this);
      this.src = 'cloud.png';
      if (settings.decemberween) {
        this.src = 'snow.png';
      }
    }

    return Cloud;

  })(Sprite);

  Cloud.prototype.spriteinit = function() {
    var sprit;
    tex = PIXI.Texture.fromImage(sourcebaseurl + this.src);
    sprit = new PIXI.TilingSprite(tex, screensize.x, screensize.y);
    this._pixisprite = sprit;
    stage.addChildAt(sprit, 0);
    return sprit;
  };

  Cloud.prototype.render = function() {
    var flip, offset, pos, sprit;
    pos = cameraoffset();
    flip = false;
    if (!this._pixisprite) {
      this.spriteinit();
    }
    sprit = this._pixisprite;
    offset = V(tickno * -0.2, Math.sin(tickno / 200) * 64);
    sprit.position = VTOPP(pos);
    return sprit.tilePosition = VTOPP(offset);
  };

  Grid = (function(_super) {
    __extends(Grid, _super);

    function Grid() {
      Grid.__super__.constructor.call(this);
      this.src = 'square.png';
    }

    return Grid;

  })(Sprite);

  Grid.prototype.render = function() {
    var flip, offset, pos, sprit;
    pos = cameraoffset();
    flip = false;
    tex = PIXI.Texture.fromImage(sourcebaseurl + this.src);
    if (!this._pixisprite) {
      sprit = new PIXI.TilingSprite(tex, screensize.x, screensize.y);
      this._pixisprite = sprit;
      stage.addChildAt(sprit, 1);
    }
    sprit = this._pixisprite;
    offset = V(tickno * -0.2, Math.sin(tickno / 200) * 64);
    sprit.position = new PIXI.Point(pos.x, pos.y);
    offset = camera.pos.nmul(-1);
    sprit.tilePosition = new PIXI.Point(offset.x, offset.y);
    sprit.setTexture(tex);
    if (!settings.grid && this._pixisprite) {
      stage.removeChild(this._pixisprite);
      return this._pixisprite = void 0;
    }
  };

  WORLD = {};

  WORLD.entities = [];

  WORLD.entities.push(new Cloud());

  WORLD.entities.push(new Grid());

  WORLD.bglayer = bglayer;

  WORLD.fglayer = fglayer;

  WORLD.spritelayer = [];

  randpos = function() {
    return V(640 * 1.5, 64 * 2).vadd(randvec().vmul(V(640, 100)));
  };

  placeshrub = function(pos) {
    pos = pos.vsub(V(0, 32));
    return fglayer.push(new GenericSprite(pos, 'shrub.png'));
  };

  BugMeter = (function(_super) {
    __extends(BugMeter, _super);

    function BugMeter() {
      BugMeter.__super__.constructor.call(this);
      this.src = 'bughealth.png';
      this.value = 3;
    }

    return BugMeter;

  })(GenericSprite);

  BugMeter.prototype.spriteinit = function() {
    var sprit;
    tex = PIXI.Texture.fromImage(sourcebaseurl + this.src);
    this.spritesize = V(32, 32);
    sprit = new PIXI.TilingSprite(tex, this.spritesize.x * this.value, this.spritesize.y);
    this._pixisprite = sprit;
    stage.addChild(sprit);
    return sprit;
  };

  BugMeter.prototype.render = function() {
    var flip, pos, sprit;
    pos = cameraoffset();
    flip = false;
    if (!this._pixisprite) {
      this.spriteinit();
    }
    sprit = this._pixisprite;
    sprit.width = this.spritesize.x * this.value;
    return sprit.position = VTOPP(pos);
  };

  BugMeter.prototype.tick = function() {
    return this.update(ladybug.health);
  };

  BugMeter.prototype.update = function(value) {
    this.removesprite();
    return this.value = value;
  };

  EnergyMeter = (function(_super) {
    __extends(EnergyMeter, _super);

    function EnergyMeter() {
      EnergyMeter.__super__.constructor.call(this);
      this.src = 'energy1.png';
    }

    return EnergyMeter;

  })(BugMeter);

  EnergyMeter.prototype.render = function() {
    var flip, pos, sprit;
    pos = cameraoffset();
    pos = pos.vadd(V(0, 16));
    flip = false;
    if (!this._pixisprite) {
      this.spriteinit();
    }
    sprit = this._pixisprite;
    sprit.width = this.spritesize.x * this.value;
    return sprit.position = VTOPP(pos);
  };

  EnergyMeter.prototype.tick = function() {
    return this.update(ladybug.energy);
  };

  blockdata = [];

  blockdata.push([-64, 64 * 5 - 4, 64 * 12, 100]);

  blockdata.push([64 * 4, 64 * 2, 32, 32]);

  blockdata.push([64 * 5, 64 * 4, 32, 32]);

  blockdata.push([64 * 6, 64 * 3, 32, 32]);

  blockdata.push([0, 64 * 4, 32, 32]);

  blockdata.push([32, 64 * 4, 64 * 2, 64 * 2]);

  blockdata.push([64 * 12, 64 * 4, 64 * 12, 200]);

  loadblocks = function(blockdata) {
    return blockdata.forEach(function(blockdatum) {
      var h, w, x, y;
      x = blockdatum[0], y = blockdatum[1], w = blockdatum[2], h = blockdatum[3];
      return bglayer.push(new Block(x, y, w, h));
    });
  };

  scatterents = function(classproto, num) {
    var _i, _results;
    return WORLD.spritelayer = WORLD.spritelayer.concat((function() {
      _results = [];
      for (var _i = 0; 0 <= num ? _i < num : _i > num; 0 <= num ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function() {
      return new classproto(randpos());
    }));
  };

  WORLD_ONE_INIT = function() {
    scatterents(Target, 10);
    scatterents(Jelly, 10);
    scatterents(Energy, 10);
    scatterents(Gold, 10);
    scatterents(Thug, 3);
    scatterents(Lila, 1);
    WORLD.spritelayer.push(new PowerSuit(V(128, 32)));
    blockdata.push([128 + 8, 64 + 20, 64, 32]);
    blockdata.push([128 + 8 + 64, 64 + 20 + 32, 32, 32]);
    loadblocks(blockdata);
    placeshrub(V(64 * 8, 64 * 5 - 4));
    placeshrub(V(64 * 7 - 48, 64 * 5 - 4));
    return placeshrub(V(64 * 9, 64 * 5 - 4));
  };

  WORLDINIT = function() {
    var bugmeter, energymeter;
    bugmeter = new BugMeter;
    WORLD.entities.push(bugmeter);
    energymeter = new EnergyMeter;
    WORLD.entities.push(energymeter);
    this.bugmeter = bugmeter;
    if (settings.hat) {
      WORLD.entities.push(new Hat());
    }
    return bglayer.forEach(function(block) {
      var fence;
      fence = new Fence;
      fence.pos = relativetobox(block, V(0, 0));
      WORLD.spritelayer.push(fence);
      fence = new Fence;
      fence.pos = relativetobox(block, V(1, 0));
      return WORLD.spritelayer.push(fence);
    });
  };

  randtri = function() {
    return new Poly([randpos(), randpos(), randpos()]);
  };

  omnicide = function() {
    WORLD.spritelayer.forEach(function(sprite) {
      return sprite.KILLME = true;
    });
    return WORLD.euthanasia();
  };

  clearworld = function() {
    WORLD.entities.forEach(function(sprite) {
      return removesprite(sprite);
    });
    WORLD.entities = [];
    WORLD.spritelayer.forEach(function(sprite) {
      return removesprite(sprite);
    });
    WORLD.spritelayer = [];
    WORLD.spritelayer = [];
    bglayer.forEach(function(sprite) {
      return removesprite(sprite);
    });
    bglayer = [];
    WORLD.bglayer = [];
    fglayer.forEach(function(sprite) {
      return removesprite(sprite);
    });
    fglayer = [];
    return WORLD.fglayer = [];
  };

  ROBOWORLD_INIT = function() {
    scatterents(Burd, 8);
    blockdata = [];
    blockdata.push([-64, 64 * 4, 64 * 12, 100]);
    blockdata.push([64 * 12, 64 * 5, 64 * 12, 100]);
    loadblocks(blockdata);
    WORLD.spritelayer = WORLD.spritelayer.concat([0, 1, 2, 3].map(function() {
      return new Robo(randpos());
    }));
    return WORLD.spritelayer.push(randtri());
  };

  WORLD_ONE_INIT();

  WORLDINIT();

  camera = {};

  camera.offset = V();

  camera.pos = V();

  PIXI.DisplayObjectContainer;

  cameraoffset = function() {
    var tmppos;
    tmppos = ladybug.pos.vsub(screensize.ndiv(2));
    tmppos.y = 0;
    return tmppos.vsub(camera.offset.ndiv(scale));
  };

  render = function() {
    var renderables;
    camera.pos = cameraoffset();
    renderables = [].concat(WORLD.bglayer, WORLD.spritelayer, [ladybug], fglayer, WORLD.entities);
    renderables.forEach(function(sprite) {
      return typeof sprite.render === "function" ? sprite.render() : void 0;
    });
    return drawhitboxes(renderables);
  };

  drawhitboxes = function(ents) {
    var graf;
    stage.removeChild(hitboxlayer);
    hitboxlayer = new PIXI.DisplayObjectContainer;
    stage.addChild(hitboxlayer);
    if (!settings.grid) {
      return;
    }
    graf = new PIXI.Graphics();
    graf.lineStyle(1, 0x00ff00, 1);
    graf.beginFill(0xff0000, 1 / 8);
    ents.forEach(function(ent) {
      var box;
      graf.drawCircle(ent.pos.x, ent.pos.y, 4);
      box = typeof ent.gethitbox === "function" ? ent.gethitbox() : void 0;
      if (!box) {
        return;
      }
      return graf.drawRect(box.x, box.y, box.w, box.h);
    });
    return hitboxlayer.addChild(graf);
  };

  timecall = function(func) {
    var starttime;
    starttime = Date.now();
    func();
    return Date.now() - starttime;
  };

  tickwaitms = 20;

  skipframes = 0;

  ticktimes = [];

  checkcolls = function(ent, otherents) {
    var bawks;
    bawks = ent.gethitbox();
    return otherents.forEach(function(target) {
      var targethitbox;
      if (target === ent) {
        return;
      }
      targethitbox = target.gethitbox();
      if (bawks.overlaps(targethitbox)) {
        return typeof target.collide === "function" ? target.collide(ent) : void 0;
      }
    });
  };

  WORLD.euthanasia = function() {
    var doomedsprites;
    doomedsprites = WORLD.spritelayer.filter(function(sprite) {
      return sprite.KILLME != null;
    });
    doomedsprites.forEach(function(sprite) {
      return typeof sprite.cleanup === "function" ? sprite.cleanup() : void 0;
    });
    return WORLD.spritelayer = _.difference(WORLD.spritelayer, doomedsprites);
  };

  WORLD.tick = function() {
    var key, _base, _i, _len, _ref3;
    _ref3 = control.heldkeys;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      key = _ref3[_i];
      if (typeof (_base = control.holdbindings)[key] === "function") {
        _base[key]();
      }
    }
    checkcolls(ladybug, WORLD.spritelayer);
    WORLD.spritelayer.forEach(function(sprite) {
      return checkcolls(sprite, _.without(WORLD.spritelayer, sprite));
    });
    WORLD.euthanasia();
    WORLD.spritelayer.forEach(function(sprite) {
      return typeof sprite.tick === "function" ? sprite.tick() : void 0;
    });
    ladybug.tick();
    WORLD.entities.forEach(function(ent) {
      return typeof ent.tick === "function" ? ent.tick() : void 0;
    });
    render();
    return tickno++;
  };

  fpscounter = $(xmltag());

  tt = 0;

  mainloop = function() {
    var fps, fpsgoal, idealfps, ticktime;
    updatesettingstable();
    if (!settings.paused) {
      ticktime = timecall(WORLD.tick);
      tt = ticktime;
      fps = Math.round(1000 / Math.max(tickwaitms, ticktime));
      idealfps = Math.round(1000 / tickwaitms);
      fpscounter.html("tick time: " + tt + "ms, running at approx " + fps + " fps (aiming for " + idealfps + " fps)");
    }
    fpsgoal = settings.slowmo ? 4 : 60;
    tickwaitms = 1000 / fpsgoal;
    setTimeout(mainloop, Math.max(tickwaitms - ticktime, 1));
    return requestAnimFrame(animate);
  };

  xmlwrap = function(tagname, body) {
    return xmltag(tagname, void 0, body);
  };

  maketablerow = function(values) {
    var tds;
    tds = values.map(function(v) {
      return xmlwrap("td", v);
    });
    return xmlwrap("tr", tds);
  };

  bindingsDOM = $("<table>");

  _ref3 = control.bindings;
  for (k in _ref3) {
    v = _ref3[k];
    bindingsDOM.append(maketablerow([keyCodeToChar[k], control.bindingnames[k] || "??"]));
  }

  settingsDOM = $("<table>");

  updatesettingstable = function() {
    var _results;
    settingsDOM.html("");
    _results = [];
    for (k in settings) {
      v = settings[k];
      _results.push(settingsDOM.append(maketablerow([k, v])));
    }
    return _results;
  };

  INIT = function() {
    body.append(fpscounter);
    body.append("<b>bindings:</b>");
    body.append(bindingsDOM);
    body.append("<b>settings:</b>");
    body.append(settingsDOM);
    mainloop();
    return requestAnimFrame(animate);
  };

  INIT();

  adjustmouseevent = function(e) {
    var adjusted, coffs;
    coffs = $(renderer.view).offset();
    adjusted = V(e.pageX - coffs.left, e.pageY - coffs.top);
    adjusted = adjusted.ndiv(scale);
    adjusted = adjusted.vadd(camera.pos);
    adjusted = adjusted.op(Math.round);
    return adjusted;
  };

  BLOCKCREATIONTOOL = {};

  BLOCKCREATIONTOOL.creatingblock = false;

  BLOCKCREATIONTOOL.mousedown = function(e) {
    var adjusted;
    if (e.button !== 0) {
      return;
    }
    adjusted = adjustmouseevent(e);
    adjusted = snapmouseadjust(adjusted);
    BLOCKCREATIONTOOL.creatingblock = new Block(adjusted.x, adjusted.y, 32, 32);
    return bglayer.push(BLOCKCREATIONTOOL.creatingblock);
  };

  BLOCKCREATIONTOOL.mouseup = function(e) {
    BLOCKCREATIONTOOL.creatingblock.fixnegative();
    return BLOCKCREATIONTOOL.creatingblock = false;
  };

  snapmouseadjust = function(mpos) {
    var gridsize, snaptogrid;
    snaptogrid = isholdingkey('z');
    if (snaptogrid) {
      gridsize = 32;
      mpos = mpos.ndiv(gridsize).op(Math.floor).nmul(gridsize);
    }
    return mpos;
  };

  $(renderer.view).mousedown(BLOCKCREATIONTOOL.mousedown);

  $(renderer.view).mouseup(BLOCKCREATIONTOOL.mouseup);

  ORIGCLICKPOS = false;

  mousemiddledownhandler = function(e) {
    if (e.button !== 1) {
      return;
    }
    e.preventDefault();
    return ORIGCLICKPOS = V(e.pageX, e.pageY);
  };

  mousemiddleuphandler = function(e) {
    if (e.button !== 1) {
      return;
    }
    ORIGCLICKPOS = false;
    return camera.offset = V();
  };

  mousemovehandler = function(e) {
    var creatingblock, currclickpos, mpos, offset;
    mpos = snapmouseadjust(adjustmouseevent(e));
    creatingblock = BLOCKCREATIONTOOL.creatingblock;
    if (creatingblock) {
      creatingblock.w = mpos.x - creatingblock.x;
      creatingblock.h = mpos.y - creatingblock.y;
      creatingblock.removesprite();
      creatingblock.tostone();
    }
    if (ORIGCLICKPOS) {
      currclickpos = V(e.pageX, e.pageY);
      offset = currclickpos.vsub(ORIGCLICKPOS);
      camera.offset = offset;
      return console.log(offset);
    }
  };

  $(renderer.view).mousemove(mousemovehandler);

  $(renderer.view).mousedown(mousemiddledownhandler);

  $(renderer.view).mouseup(mousemiddleuphandler);

  mouserightdownhandler = function(e) {
    var adjusted, blox, ent;
    if (e.button !== 2) {
      return;
    }
    e.preventDefault();
    adjusted = adjustmouseevent(e);
    blox = blocksatpoint(bglayer, adjusted);
    console.log(blox);
    if (blox.length > 0) {
      ent = blox[0];
      bglayer = _.without(bglayer, ent);
      WORLD.bglayer = bglayer;
      return removesprite(ent);
    }
  };

  $(renderer.view).mousedown(mouserightdownhandler);

  $(renderer.view).contextmenu(function() {
    return false;
  });

  $(renderer.view).bind('wheel', function(e) {
    var delta;
    e.preventDefault();
    delta = e.originalEvent.deltaY;
    up = delta > 0;
    console.log(delta);
    if (up) {
      scale -= 0.1;
    }
    if (!up) {
      return scale += 0.1;
    }
  });

  lastmodified = function(date) {
    return body.prepend("<p>last modified " + (jQuery.timeago(new Date(date))) + ", " + date + "</p>");
  };

  $.ajax(THISFILE, {
    type: "HEAD",
    success: function(data, satus, xhr) {
      return lastmodified(xhr.getResponseHeader("Last-Modified"));
    }
  });

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  spawnables = {};

  spawnables.burd = Burd;

  jame = {};

  jame.spawn = function(classname) {
    var ent;
    if (!spawnables[classname]) {
      return;
    }
    ent = typeof spawnables[classname] === "function" ? new spawnables[classname]() : void 0;
    return WORLD.entities.push(ent);
  };

  jame.burdme = function() {
    ladybug = new PlayerBurd();
    WORLD.entities.push(ladybug);
    return console.log(ladybug);
  };

  jame.WORLD = WORLD;

  root.jame = jame;

  root.stage = stage;

}).call(this);
