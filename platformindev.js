// Generated by CoffeeScript 1.6.3
(function() {
  var Block, BugLady, GenericSprite, Layer, Sprite, V2d, add, arrclone, arrsansval, bglayer, bindings, body, boggle, boggletitle, bottomof, brickcanvas, brickctx, bugbox, cachedimg, cacheflippedimg, canvas, chievo, ctx, drawcolls, drawoutline, fallbox, fglayer, flipimg, heldkeys, hitboxfilter, holdbindings, isholdingkey, keyholdbind, keytapbind, ladybug, leftof, loadimg, looptick, mainloop, memoize, placeshrub, preload, preloadcontainer, randelem, randint, rectsoverlap, render, rightof, slowmo, somanygrafics, sourcebaseurl, sources, tickno, tilebackground, tmpcanvas, tmpcanvasjq, tmpctx, topof, vadd, vnmul, xmlatts, xmltag,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  slowmo = false;

  canvas = $("<canvas>");

  body = $("body");

  xmlatts = function(atts) {
    var key, val;
    return ((function() {
      var _results;
      _results = [];
      for (key in atts) {
        if (!__hasProp.call(atts, key)) continue;
        val = atts[key];
        _results.push(" " + key + "=\"" + val + "\"");
      }
      return _results;
    })()).join();
  };

  xmltag = function(type, atts, body) {
    if (type == null) {
      type = "div";
    }
    if (atts == null) {
      atts = {};
    }
    if (body == null) {
      body = "";
    }
    return "<" + type + (xmlatts(atts)) + ">" + body + "</" + type + ">";
  };

  V2d = (function() {
    function V2d(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
    }

    return V2d;

  })();

  add = function(a, b) {
    return a + b;
  };

  vadd = function(v, u) {
    return new V2d(add(v.x, u.x), add(v.y, u.y));
  };

  vnmul = function(v, n) {
    return new V2d(v.x * n, v.y * n);
  };

  Sprite = (function() {
    function Sprite() {
      this.vel = new V2d();
      this.pos = new V2d();
    }

    Sprite.prototype.tick = function() {};

    return Sprite;

  })();

  GenericSprite = (function() {
    function GenericSprite(pos, src) {
      this.pos = pos != null ? pos : new V2d(0, 0);
      this.src = src;
    }

    GenericSprite.prototype.render = function(ctx) {
      var img;
      img = cachedimg(this.src);
      return ctx.drawImage(img, this.pos.x, this.pos.y - img.naturalHeight);
    };

    return GenericSprite;

  })();

  isholdingkey = function(key) {
    key = key.toUpperCase().charCodeAt(0);
    return __indexOf.call(heldkeys, key) >= 0;
  };

  BugLady = (function(_super) {
    __extends(BugLady, _super);

    function BugLady() {
      BugLady.__super__.constructor.apply(this, arguments);
      this.jumping = false;
      this.attacking = false;
      this.attacktimeout = 0;
    }

    return BugLady;

  })(Sprite);

  BugLady.prototype.tick = function() {
    var box, candidates, heading, lbw, spriteheight, width;
    if (this.vel.x > 4) {
      this.vel.x = 4;
    }
    if (this.vel.x < -4) {
      this.vel.x = -4;
    }
    spriteheight = 64;
    box = fallbox(this);
    candidates = hitboxfilter(box, bglayer);
    if (candidates.length > 0 && this.vel.y >= 0) {
      this.pos.y = candidates[0].y - spriteheight;
      this.pos.y += 1;
      this.vel.y = 0;
    }
    if (candidates.length > 0 && this.vel.y < 0) {
      this.pos.y += 1;
      this.vel.y = 0;
    } else {

    }
    this.pos = vadd(this.pos, this.vel);
    if (candidates.length > 0) {
      this.pos.y += 1;
      this.vel.y = 0;
    }
    if (!this.touchingground()) {
      this.vel.y += 1;
    }
    if (this.touchingground()) {
      this.vel.x = this.vel.x * 0.5;
      if (Math.abs(this.vel.x) < 0.0001) {
        this.vel.x = 0;
      }
    }
    this.attacking = this.attacktimeout > 0;
    heading = this.facingleft ? -1 : 1;
    if (this.attacking) {
      this.vel.y *= 0.7;
      this.attacktimeout -= 1;
      this.vel.x += heading * 0.3;
    }
    this.jumping = isholdingkey('w');
    if (this.touchingground() && this.jumping) {
      this.vel.y = -13;
    }
    lbw = 32;
    width = 640 + lbw;
    this.avoidwalls();
    return this.pos.x = ((this.pos.x + (width + lbw)) % width) - lbw;
  };

  randint = function(max) {
    return Math.floor(Math.random() * max);
  };

  randelem = function(arr) {
    return arr[randint(arr.length)];
  };

  boggletitle = function() {
    return randelem(["Buggy the boggle champ", "Bushboggler 2013", "Boggle that bush", "Collosal waste of time", "Boggle 2: Electric boggleoo", "Buggy bushboggle", "excuse me wtf are you doing", "Bush it, bush it real good", "Fondly regard flora", "&lt;chievo title unavailable due to trademark infringement&gt;", "Returning a bug to its natural habitat"]);
  };

  chievo = false;

  boggle = function() {
    var boxes, cand, chievbox, hit, pic;
    if (chievo) {
      return;
    }
    hit = bugbox(ladybug);
    boxes = fglayer.map(function(obj) {
      return new Block(obj.pos.x, obj.pos.y, 64, 64);
    });
    console.log(boxes);
    cand = hitboxfilter(hit, boxes);
    if (cand.length > 0) {
      chievo = true;
      chievbox = $("<div><span style='display: inline-block; margin-left: 16px'><b>ACHIEVEMENT UNLOCKED</b><br/>" + (boggletitle()) + "</span></div>");
      chievbox.css('border-radius', '50px');
      chievbox.css('padding', '8px 32px');
      chievbox.css('padding-left', '8px');
      chievbox.css('background-color', '#333');
      chievbox.css('color', 'white');
      chievbox.css('font-family', 'sans-serif');
      chievbox.css('display', 'inline-block');
      chievbox.css('position', 'absolute');
      chievbox.css('top', '-100px');
      chievbox.css('left', '32px');
      chievbox.prepend(pic = $(cachedimg('boggle.png')));
      pic.css('background-color', '#444');
      pic.css('float', 'left');
      pic.css('border', '2px solid white');
      pic.css('border-radius', '64px');
      pic.css('background-image', 'url(sprites/shrub.png)');
      pic.css('background-repeat', 'no-repeat');
      pic.css('background-position', '0px 32px');
      body.append(chievbox);
      chievbox.animate({
        top: '32px'
      }).delay(4000);
      return chievbox.animate({
        top: '-100px'
      }, {
        queue: true
      }).delay(2000);
    }
  };

  BugLady.prototype.render = function(ctx) {
    var img, src, vel, walking;
    src = "lovelyshorter.png";
    vel = Math.abs(this.vel.x);
    walking = vel > 0.2;
    if (walking) {
      src = tickno % 12 > 6 ? 'lovelyrun1.png' : 'lovelyrun2.png';
    }
    if (!this.touchingground()) {
      src = 'lovelyjump.png';
    }
    if (!walking && isholdingkey('s')) {
      src = 'lovelycrouch.png';
    }
    if (!walking && this.touchingground() && isholdingkey('x')) {
      boggle();
      src = 'boggle.png';
    }
    if (this.attacking) {
      src = 'viewtiful.png';
    }
    img = this.facingleft ? cacheflippedimg(src) : cachedimg(src);
    return ctx.drawImage(img, this.pos.x, this.pos.y);
  };

  hitboxfilter = function(hitbox, rectarray) {
    return rectarray.filter(function(box) {
      return rectsoverlap(hitbox, box);
    });
  };

  rectsoverlap = function(recta, rectb) {
    if (recta.x > rectb.x + rectb.w || recta.y > rectb.y + rectb.h || recta.x + recta.w < rectb.x || recta.y + recta.h < rectb.y) {
      return false;
    } else {
      return true;
    }
  };

  bugbox = function(bug) {
    var h, offsety, trueh, w;
    trueh = 64;
    offsety = -4;
    h = 50;
    w = 20 + Math.abs(bug.vel.x);
    return new Block(bug.pos.x + (64 / 2 - w / 2), bug.pos.y + (trueh - h), w, h);
  };

  fallbox = function(bug) {
    var box;
    box = bugbox(bug);
    box.y += bug.vel.y;
    return box;
  };

  ladybug = new BugLady;

  ladybug.facingleft = false;

  ladybug.jumping = false;

  leftof = function(box) {
    return box.x;
  };

  rightof = function(box) {
    return box.x + box.w;
  };

  bottomof = function(box) {
    return box.y + box.h;
  };

  topof = function(box) {
    return box.y;
  };

  BugLady.prototype.avoidwalls = function() {
    var block, blockcandidates, collidebox, notontop, _i, _len, _results;
    collidebox = bugbox(ladybug);
    blockcandidates = hitboxfilter(collidebox, bglayer);
    _results = [];
    for (_i = 0, _len = blockcandidates.length; _i < _len; _i++) {
      block = blockcandidates[_i];
      notontop = bottomof(collidebox) > topof(block) + 8;
      if (notontop && leftof(collidebox) < leftof(block)) {
        this.vel.x = 0;
        this.pos.x -= 4;
      }
      if (notontop && rightof(collidebox) > rightof(block)) {
        this.vel.x = 0;
        _results.push(this.pos.x += 4);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  BugLady.prototype.touchingground = function() {
    var block, blockcandidates, collidebox, touch, _i, _len;
    touch = false;
    collidebox = bugbox(ladybug);
    blockcandidates = bglayer.filter(function(block) {
      return rectsoverlap(collidebox, block);
    });
    for (_i = 0, _len = blockcandidates.length; _i < _len; _i++) {
      block = blockcandidates[_i];
      if (collidebox.y + collidebox.h < block.y + block.h) {
        touch = true;
      }
    }
    return touch;
  };

  bindings = {};

  holdbindings = {};

  heldkeys = [];

  keytapbind = function(key, func) {
    var k;
    k = key.toUpperCase().charCodeAt(0);
    return bindings[k] = func;
  };

  keyholdbind = function(key, func) {
    var k;
    k = key.toUpperCase().charCodeAt(0);
    return holdbindings[k] = func;
  };

  arrclone = function(arr) {
    return arr.slice(0);
  };

  keytapbind('t', function() {
    return slowmo = !slowmo;
  });

  somanygrafics = true;

  keytapbind('g', function() {
    return somanygrafics = !somanygrafics;
  });

  keyholdbind('j', function() {
    return ladybug.attacktimeout = 10;
  });

  keyholdbind('w', function() {
    return ladybug.jumping = true;
  });

  keyholdbind('s', function() {});

  keyholdbind('a', function() {
    var amt;
    ladybug.facingleft = true;
    amt = ladybug.touchingground() ? 4 : 1;
    return ladybug.vel.x -= amt;
  });

  keyholdbind('d', function() {
    var amt;
    ladybug.facingleft = false;
    amt = ladybug.touchingground() ? 4 : 1;
    return ladybug.vel.x += amt;
  });

  arrsansval = function(arr, val) {
    var i, newarr, _ref;
    if (_ref = !val, __indexOf.call(arr, _ref) >= 0) {
      return arr;
    }
    newarr = arrclone(arr);
    i = newarr.indexOf(val);
    if (i === -1) {
      return newarr;
    }
    newarr.splice(i, 1);
    return newarr;
  };

  $(document).bind('keydown', function(e) {
    var key;
    key = e.which;
    if (typeof bindings[key] === "function") {
      bindings[key]();
    }
    if (!(__indexOf.call(heldkeys, key) >= 0)) {
      return heldkeys.push(key);
    }
  });

  $(document).bind('keyup', function(e) {
    var key;
    key = e.which;
    return heldkeys = arrsansval(heldkeys, key);
  });

  tmpcanvasjq = $("<canvas>");

  tmpcanvas = tmpcanvasjq[0];

  ladybug.pos = {
    x: 64,
    y: 100
  };

  ctx = canvas[0].getContext('2d');

  canvas.attr('height', 64 * 6);

  canvas.attr('width', 640);

  canvas.css('border', '1px solid black');

  tickno = 0;

  sourcebaseurl = "./sprites/";

  loadimg = function(src) {
    var img;
    img = new Image;
    img.src = sourcebaseurl + src;
    return img;
  };

  memoize = function(func) {
    var newfunc;
    newfunc = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!(args in newfunc._memos)) {
        newfunc._memos[args] = func.apply(this, args);
      }
      return newfunc._memos[args];
    };
    newfunc._memos = {};
    return newfunc;
  };

  cachedimg = memoize(loadimg);

  flipimg = function(src) {
    var img, newcanvas, newctx;
    img = cachedimg(src);
    newcanvas = $("<canvas>")[0];
    newcanvas.width = img.naturalWidth;
    newcanvas.height = img.naturalHeight;
    newctx = newcanvas.getContext('2d');
    newctx.scale(-1, 1);
    newctx.translate(-img.naturalWidth, 0);
    newctx.drawImage(img, 0, 0);
    return newcanvas;
  };

  cacheflippedimg = memoize(flipimg);

  sources = ['lovelyshorter.png', 'lovelycrouch.png', 'lovelyrun1.png', 'lovelyrun2.png', 'lovelyjump.png', 'cloud.png', 'lovelyfall.png', 'viewtiful.png', 'boggle.png'];

  sources.push('groundtile.png');

  preloadcontainer = $("<div>");

  preloadcontainer.hide();

  body.append(preloadcontainer);

  preload = function() {
    var img, src, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      src = sources[_i];
      console.log("PRELOADING " + src);
      img = cachedimg(src);
      _results.push(preloadcontainer.append(img));
    }
    return _results;
  };

  preload();

  tilebackground = function(ctx, offset, src) {
    var ch, cw, horiznum, img, vertnum, _i, _ref, _results;
    cw = canvas[0].width;
    ch = canvas[0].height;
    img = cachedimg(src);
    if (img.width === 0 || img.height === 0) {
      return;
    }
    horiznum = Math.floor(cw / img.width);
    vertnum = Math.floor(ch / img.height);
    return (function() {
      _results = [];
      for (var _i = -1, _ref = horiznum + 1; -1 <= _ref ? _i < _ref : _i > _ref; -1 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).forEach(function(n) {
      var _i, _ref, _results;
      return (function() {
        _results = [];
        for (var _i = -1, _ref = vertnum + 1; -1 <= _ref ? _i <= _ref : _i >= _ref; -1 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).forEach(function(m) {
        var finalx, finaly;
        finalx = n * img.width + (offset.x % img.width);
        finaly = m * img.height + (offset.y % img.height);
        return ctx.drawImage(img, finalx, finaly);
      });
    });
  };

  Block = (function() {
    function Block(x, y, w, h) {
      this.x = x;
      this.y = y;
      this.w = w;
      this.h = h;
    }

    Block.prototype.render = function(ctx) {
      ctx.beginPath();
      ctx.fillStyle = 'brown';
      return ctx.fillRect(this.x, this.y, this.w, this.h);
    };

    return Block;

  })();

  tmpcanvas.width = canvas[0].width;

  tmpcanvas.height = canvas[0].height;

  tmpctx = tmpcanvas.getContext('2d');

  bglayer = [];

  bglayer.push(new Block(-64, 64 * 5 - 4, 64 * 12, 100));

  bglayer.push(new Block(64 * 4, 64 * 2, 32, 32));

  bglayer.push(new Block(64 * 5, 64 * 4, 32, 32));

  bglayer.push(new Block(64 * 6, 64 * 3, 32, 32));

  bglayer.push(new Block(32, 64 * 4, 64 * 2, 64 * 2));

  fglayer = [];

  placeshrub = function(pos) {
    return fglayer.push(new GenericSprite(pos, 'shrub.png'));
  };

  placeshrub(new V2d(64 * 8, 64 * 5 - 4));

  placeshrub(new V2d(64 * 7 - 48, 64 * 5 - 4));

  Layer = function() {
    var newlayer;
    newlayer = $("<canvas>");
    return newlayer[0];
  };

  brickcanvas = Layer();

  brickcanvas.width = canvas[0].width;

  brickcanvas.height = canvas[0].height;

  brickctx = brickcanvas.getContext('2d');

  drawoutline = function(ctx, block, color) {
    ctx.beginPath();
    ctx.rect(block.x, block.y, block.w, block.h);
    ctx.lineWidth = 1;
    ctx.strokeStyle = color;
    return ctx.stroke();
  };

  drawcolls = function(ctx) {
    var collidebox;
    collidebox = bugbox(ladybug);
    drawoutline(ctx, collidebox, 'blue');
    collidebox = fallbox(ladybug);
    drawoutline(ctx, collidebox, 'orange');
    return bglayer.forEach(function(block) {
      var color;
      color = rectsoverlap(collidebox, block) ? 'red' : 'green';
      return drawoutline(ctx, block, color);
    });
  };

  render = function() {
    ctx.fillRect(0, 0, 640, 640);
    if (somanygrafics) {
      tilebackground(ctx, {
        x: tickno * -0.2,
        y: Math.sin(tickno / 200) * 64
      }, "cloud.png");
    }
    tilebackground(brickctx, {
      x: 0,
      y: 0
    }, "groundtile.png");
    tmpctx.clearRect(0, 0, 640, 640);
    bglayer.forEach(function(sprite) {
      return typeof sprite.render === "function" ? sprite.render(tmpctx) : void 0;
    });
    tmpctx.globalCompositeOperation = "source-in";
    tmpctx.drawImage(brickcanvas, 0, 0);
    tmpctx.globalCompositeOperation = "source-over";
    ctx.drawImage(tmpcanvas, 0, 0);
    drawcolls(ctx);
    ladybug.render(ctx);
    return fglayer.forEach(function(sprite) {
      return typeof sprite.render === "function" ? sprite.render(ctx) : void 0;
    });
  };

  looptick = function() {
    var key, _i, _len;
    for (_i = 0, _len = heldkeys.length; _i < _len; _i++) {
      key = heldkeys[_i];
      if (typeof holdbindings[key] === "function") {
        holdbindings[key]();
      }
    }
    ladybug.tick();
    tickno++;
    return render();
  };

  mainloop = function() {
    var tickwaitms;
    looptick();
    tickwaitms = slowmo ? 50 : 10;
    return setTimeout(mainloop, tickwaitms);
  };

  preloadcontainer.imagesLoaded('done', function() {
    var answer, c;
    body.append(canvas);
    ctx.fillStyle = "#008080";
    ctx.fillRect(0, 0, 640, 64);
    body.append("<br/><em>there's no crime to fight around here, use WASD to waste time by purposelessly wiggling around,<br/>X to boggle vacantly and J to do some wicked sick totally radical moves</em><br/>");
    body.append(xmltag('a', {
      target: '_blank',
      href: 'http://www.youtube.com/watch?v=NbVZPu_JM6I'
    }, "recommended soundtrack"));
    body.append(c = $(xmltag()));
    c.css('color', 'silver');
    c.append("<p>psst CAN YOU FIND THE SAUCY SUPER SECRET SAPPHIC SLOPPY SMOOCHING SCENE??</p>");
    c.append(answer = $("<em>(answer: no you can't, because it doesn't exist)</em>"));
    answer.css('transform', 'rotate(180deg)');
    answer.css({
      'display': 'inline-block'
    });
    return mainloop();
  });

}).call(this);
